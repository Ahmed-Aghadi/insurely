{
  "language": "Solidity",
  "sources": {
    "contracts/Exchange.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IExchange {\n    function ethToTokenSwap(uint256 _minTokens) external payable;\n\n    function ethToTokenTransfer(uint256 _minTokens, address _recipient) external payable;\n}\n\ninterface IExchangeFactory {\n    function getExchange(address _tokenAddress) external returns (address);\n}\n\ncontract Exchange is ERC20 {\n    address public tokenAddress;\n    address public factoryAddress;\n\n    constructor(address _token) ERC20(\"Swap\", \"SWAP\") {\n        require(_token != address(0), \"invalid token address\");\n\n        tokenAddress = _token;\n        factoryAddress = msg.sender;\n    }\n\n    function addLiquidity(uint256 _tokenAmount) public payable returns (uint256) {\n        if (getReserve() == 0) {\n            IERC20 token = IERC20(tokenAddress);\n            token.transferFrom(msg.sender, address(this), _tokenAmount);\n\n            uint256 liquidity = address(this).balance;\n            _mint(msg.sender, liquidity);\n\n            return liquidity;\n        } else {\n            uint256 ethReserve = address(this).balance - msg.value;\n            uint256 tokenReserve = getReserve();\n            uint256 tokenAmount = (msg.value * tokenReserve) / ethReserve;\n            require(_tokenAmount >= tokenAmount, \"insufficient token amount\");\n\n            IERC20 token = IERC20(tokenAddress);\n            token.transferFrom(msg.sender, address(this), tokenAmount);\n\n            uint256 liquidity = (msg.value * totalSupply()) / ethReserve;\n            _mint(msg.sender, liquidity);\n\n            return liquidity;\n        }\n    }\n\n    function removeLiquidity(uint256 _amount) public returns (uint256, uint256) {\n        require(_amount > 0, \"invalid amount\");\n\n        uint256 ethAmount = (address(this).balance * _amount) / totalSupply();\n        uint256 tokenAmount = (getReserve() * _amount) / totalSupply();\n\n        _burn(msg.sender, _amount);\n        payable(msg.sender).transfer(ethAmount);\n        IERC20(tokenAddress).transfer(msg.sender, tokenAmount);\n\n        return (ethAmount, tokenAmount);\n    }\n\n    function getReserve() public view returns (uint256) {\n        return IERC20(tokenAddress).balanceOf(address(this));\n    }\n\n    function getTokenAmount(uint256 _ethSold) public view returns (uint256) {\n        require(_ethSold > 0, \"ethSold is too small\");\n\n        uint256 tokenReserve = getReserve();\n\n        return getAmount(_ethSold, address(this).balance, tokenReserve);\n    }\n\n    function getEthAmount(uint256 _tokenSold) public view returns (uint256) {\n        require(_tokenSold > 0, \"tokenSold is too small\");\n\n        uint256 tokenReserve = getReserve();\n\n        return getAmount(_tokenSold, tokenReserve, address(this).balance);\n    }\n\n    function ethToToken(uint256 _minTokens, address recipient) private {\n        uint256 tokenReserve = getReserve();\n        uint256 tokensBought = getAmount(\n            msg.value,\n            address(this).balance - msg.value,\n            tokenReserve\n        );\n\n        require(tokensBought >= _minTokens, \"insufficient output amount\");\n\n        IERC20(tokenAddress).transfer(recipient, tokensBought);\n    }\n\n    function ethToTokenTransfer(uint256 _minTokens, address _recipient) public payable {\n        ethToToken(_minTokens, _recipient);\n    }\n\n    function ethToTokenSwap(uint256 _minTokens) public payable {\n        ethToToken(_minTokens, msg.sender);\n    }\n\n    function tokenToEthSwap(uint256 _tokensSold, uint256 _minEth) public {\n        uint256 tokenReserve = getReserve();\n        uint256 ethBought = getAmount(_tokensSold, tokenReserve, address(this).balance);\n\n        require(ethBought >= _minEth, \"insufficient output amount\");\n\n        IERC20(tokenAddress).transferFrom(msg.sender, address(this), _tokensSold);\n        payable(msg.sender).transfer(ethBought);\n    }\n\n    function tokenToTokenSwap(\n        uint256 _tokensSold,\n        uint256 _minTokensBought,\n        address _tokenAddress\n    ) public {\n        address exchangeAddress = IExchangeFactory(factoryAddress).getExchange(_tokenAddress);\n        require(\n            exchangeAddress != address(this) && exchangeAddress != address(0),\n            \"invalid exchange address\"\n        );\n\n        uint256 tokenReserve = getReserve();\n        uint256 ethBought = getAmount(_tokensSold, tokenReserve, address(this).balance);\n\n        IERC20(tokenAddress).transferFrom(msg.sender, address(this), _tokensSold);\n\n        IExchange(exchangeAddress).ethToTokenTransfer{value: ethBought}(\n            _minTokensBought,\n            msg.sender\n        );\n    }\n\n    function getAmount(\n        uint256 inputAmount,\n        uint256 inputReserve,\n        uint256 outputReserve\n    ) private pure returns (uint256) {\n        require(inputReserve > 0 && outputReserve > 0, \"invalid reserves\");\n\n        uint256 inputAmountWithFee = inputAmount * 99;\n        uint256 numerator = inputAmountWithFee * outputReserve;\n        uint256 denominator = (inputReserve * 100) + inputAmountWithFee;\n\n        return numerator / denominator;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/ExchangeFactory.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\nimport \"./Exchange.sol\";\n\ncontract ExchangeFactory {\n    mapping(address => address) public tokenToExchange;\n\n    function createExchange(address _tokenAddress) public returns (address) {\n        require(_tokenAddress != address(0), \"invalid token address\");\n        require(tokenToExchange[_tokenAddress] == address(0), \"exchange already exists\");\n\n        Exchange exchange = new Exchange(_tokenAddress);\n        tokenToExchange[_tokenAddress] = address(exchange);\n\n        return address(exchange);\n    }\n\n    function getExchange(address _tokenAddress) public view returns (address) {\n        return tokenToExchange[_tokenAddress];\n    }\n}\n"
    },
    "contracts/Insurance.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IExchange {\n    function addLiquidity(uint256 _tokenAmount) external payable returns (uint256);\n\n    function removeLiquidity(uint256 _amount) external returns (uint256, uint256);\n}\n\ninterface IExchangeFactory {\n    function getExchange(address _tokenAddress) external returns (address);\n}\n\nerror WithdrawFailed();\n\n// rate of native token to liquidity token will be considered as rate at the time of removing liquidity from the exchange. So exchange will act as a price oracle.\n\ncontract Insurance is Ownable {\n    struct MemberRequest {\n        address memberAddress;\n        string requestUri;\n        uint256 accepted;\n    }\n\n    struct InsuranceClaimRequest {\n        address memberAddress;\n        string requestUri;\n        uint256 amount;\n        uint256 accepted;\n    }\n\n    // struct Acceptance {\n    //     address memberAddress; // member address who will accept joining requests or judge address who will accept claims\n    //     uint256 id;\n    // }\n\n    struct Judgement {\n        bool accepted;\n        string reasonUri;\n    }\n\n    struct ClaimAccepted {\n        uint256 claimId;\n        uint256 amount;\n    }\n\n    struct JudgementJobFullfilled {\n        uint256 judgeId;\n        uint256 amount; // amount judge will get\n    }\n\n    string private s_baseUri;\n    uint256 private immutable i_minMembers;\n    uint256 private immutable i_requestBefore;\n    uint256 private immutable i_validity;\n    uint256 private immutable i_judgingStartTime;\n    uint256 private immutable i_judgingEndTime;\n    uint256 private immutable i_judgesLength;\n    uint256 private immutable i_amount;\n    uint256 private immutable i_percentageDividedIntoJudges;\n    address private immutable i_exchangeFactoryAddress;\n    address private immutable i_exchangeAddress;\n    bool private immutable i_useLiquidityPool;\n    address private immutable i_liquidityTokenAddress;\n    uint256 private immutable i_liquidityTokenAmount;\n    string private s_groupId;\n    bool private s_isMinMembersReachedCalculated; // also isJudges selected\n    bool private s_isMinMembersReached;\n    uint256 private s_totalClaimAmountRequested;\n    uint256 private s_totalClaimAmountAccepted;\n    bool private s_isFinalJudgementCalculated;\n    // bool private s_isAnyClaimAccepted = s_claimAccepted.length > 0;\n    // bool private s_isAnyJudgementFullfilledJob == s_judgesFullfilledJobs.length > 0;\n    uint256 private s_memberNumber = 1; // total members exists + 1\n    mapping(uint256 => address) private s_idToMemberAddress; // memberNumber (id) => s_memberAddresses\n    mapping(address => uint256) private s_addressToMemberId; // memberAddress => memberNumber (id)\n    uint256 private s_requestNumber = 1; // total requests exists + 1\n    mapping(address => uint256) private s_addressToRequestId; // memberAddress => requestNumber (id)\n    mapping(uint256 => MemberRequest) private s_idToMemberRequest; // request id number => request\n    mapping(bytes => bool) private s_memberRequestAcceptances; // abi.encode(Acceptance) => member request accepted or not\n    uint256 private s_claimNumber = 1; // total claims exists + 1\n    mapping(address => uint256) s_addressToClaimId; // memberAddress => Insurance claimId\n    mapping(uint256 => InsuranceClaimRequest) s_idToClaimRequest; // Insurance claimId => request\n    mapping(address => uint256) s_addressToJudgeId; // memberAddress => Insurance claimId (even judge id starts from 1)\n    mapping(uint256 => address) s_idToJudgeAddress; // Insurance claimId => memberAddress (even judge id starts from 1)\n    mapping(bytes => Judgement) private s_judgements; // abi.encode(Acceptance) => accepted or not + reason\n    mapping(address => uint256) private s_judged; // judge address => number of judgement\n\n    JudgementJobFullfilled[] private s_judgesFullfilledJobs; // judges who fullfilled their job that is judged everyone && obviously index starts from 0\n    ClaimAccepted[] private s_claimAccepted; // claims which are accepted that more than half of judges has accepted && obviously index starts from 0\n\n    // here balance is in native token | refer withdraw function for more details\n    mapping(address => uint256) private s_balance; // member address => balance (after claim accepted)\n\n    constructor(\n        string memory baseUri,\n        uint256 minMembers,\n        uint256 requestTime, // (in seconds) time before one can make a request\n        uint256 validity, // (in seconds) insurance valid after requestTime seconds and user can claim insurance after validity\n        uint256 claimTime, // (in seconds) time before use can make a insurance claim request, after this time judging will start.\n        uint256 judgingTime, // (in seconds) time before judges should judge insurance claim requests.\n        uint256 judgesLength, // number of judges\n        uint256 amount, // amount everyone should put in the pool\n        uint256 percentDivideIntoJudges, // percent of total pool amount that should be divided into judges (total pool amount = amount * members.length where members.length == s_memberNumber - 1) (only valid for judges who had judged every claim request)\n        address exchangeFactoryAddress, // address of exchange factory contract\n        bool useLiquidityPool, // if true, the insurance contract will add funds to liquidity pool\n        address liquidityTokenAddress, // address of liquidity token\n        uint256 liquidityTokenAmount, // amount of liquidity token to add to liquidity pool\n        string memory groupId\n    ) {\n        require(minMembers > 0, \"Insurance: minMembers should be greater than 0\");\n        require(requestTime > 0, \"Insurance: requestTime should be greater than 0\");\n        require(validity > 0, \"Insurance: validity should be greater than 0\");\n        require(claimTime > 0, \"Insurance: judgingStartTime should be greater than 0\");\n        require(judgingTime > 0, \"Insurance: judgingTime should be greater than 0\");\n        require(judgesLength > 0, \"Insurance: judgesLength should be greater than 0\");\n        require(\n            judgesLength <= minMembers,\n            \"Insurance: judgesLength should be less than or equal to minMembers\"\n        );\n        require(amount > 0, \"Insurance: amount should be greater than 0\");\n        require(\n            percentDivideIntoJudges > 0,\n            \"Insurance: percentDivideIntoJudges should be greater than 0\"\n        );\n        require(\n            percentDivideIntoJudges <= 100,\n            \"Insurance: percentDivideIntoJudges should be less than or equal to 100\"\n        );\n        require(\n            exchangeFactoryAddress != address(0),\n            \"Insurance: exchangeFactoryAddress should not be 0x0\"\n        );\n        require(\n            useLiquidityPool == false || liquidityTokenAddress != address(0),\n            \"Insurance: liquidityTokenAddress should not be 0x0\"\n        );\n        require(\n            useLiquidityPool == false || liquidityTokenAmount > 0,\n            \"Insurance: liquidityTokenAmount should be greater than 0\"\n        );\n\n        s_baseUri = baseUri;\n        i_minMembers = minMembers;\n        i_requestBefore = block.timestamp + requestTime;\n        i_validity = i_requestBefore + validity;\n        i_judgingStartTime = i_validity + claimTime;\n        i_judgingEndTime = i_judgingStartTime + judgingTime;\n        i_judgesLength = judgesLength;\n        i_amount = amount;\n        i_percentageDividedIntoJudges = percentDivideIntoJudges;\n        i_exchangeFactoryAddress = exchangeFactoryAddress;\n        i_exchangeAddress = useLiquidityPool\n            ? IExchangeFactory(exchangeFactoryAddress).getExchange(liquidityTokenAddress)\n            : address(0);\n        require(\n            useLiquidityPool == false || i_exchangeAddress != address(0),\n            \"Insurance: exchangeAddress should not be 0x0, try creating exchange in exchange factory first\"\n        );\n        i_useLiquidityPool = useLiquidityPool;\n        i_liquidityTokenAddress = liquidityTokenAddress;\n        i_liquidityTokenAmount = liquidityTokenAmount;\n        s_groupId = groupId;\n    }\n\n    // function getBaseUri() public view returns (string memory) {\n    //     return s_baseUri;\n    // }\n\n    // function getMemberNumber(address memberAddress) public view returns (uint256) {\n    //     return s_addressToMemberId[memberAddress];\n    // }\n\n    // function getMemberAddress(uint256 memberNumber) public view returns (address) {\n    //     return s_idToMemberAddress[memberNumber];\n    // }\n\n    // function getMemberCount() public view returns (uint256) {\n    //     return s_memberNumber - 1;\n    // }\n\n    // function getRequestNumber() public view returns (uint256) {\n    //     return s_requestNumber - 1;\n    // }\n\n    // function getRequest(uint256 requestId) public view returns (MemberRequest memory) {\n    //     return s_idToRequest[requestId];\n    // }\n\n    // function getAcceptance(uint256 requestId, address memberAddress) public view returns (bool) {\n    //     return s_acceptances[Acceptance(memberAddress, requestId)];\n    // }\n\n    // function getClaimNumber() public view returns (uint256) {\n    //     return s_claimNumber - 1;\n    // }\n\n    function addAsMember() public {\n        require(block.timestamp < i_requestBefore, \"Adding member is not valid anymore\");\n        require(s_addressToMemberId[msg.sender] == 0, \"Already a member\");\n        require(\n            s_idToMemberRequest[s_addressToRequestId[msg.sender]].accepted == s_memberNumber - 1,\n            \"Not all members accepted the request\"\n        );\n        uint256 id = s_addressToRequestId[msg.sender];\n        s_idToMemberRequest[id] = MemberRequest(address(0), \"\", 0);\n        s_addressToRequestId[msg.sender] = 0;\n\n        s_idToMemberAddress[s_memberNumber] = msg.sender;\n        s_addressToMemberId[msg.sender] = s_memberNumber;\n        s_memberNumber++;\n\n        // add funds to liquidity pool\n        if (i_useLiquidityPool) {\n            uint tokenReserve = IERC20(i_liquidityTokenAddress).balanceOf(address(this));\n            uint exchangeTokenReserve = IERC20(i_liquidityTokenAddress).balanceOf(\n                i_exchangeAddress\n            );\n            uint balance = address(this).balance;\n            if (exchangeTokenReserve == 0) {\n                IExchange(i_exchangeAddress).addLiquidity{value: balance}(tokenReserve);\n            } else {\n                uint exchangeBalance = address(i_exchangeAddress).balance;\n                if (tokenReserve * exchangeBalance >= exchangeTokenReserve * balance) {\n                    IExchange(i_exchangeAddress).addLiquidity{value: balance}(tokenReserve);\n                } else {\n                    uint amount = (tokenReserve * exchangeBalance) / exchangeTokenReserve;\n                    IExchange(i_exchangeAddress).addLiquidity{value: amount}(tokenReserve);\n                }\n            }\n        }\n    }\n\n    // function addRequest(string memory requestUri) public {\n    //     s_requests[s_requestNumber] = MemberRequest(msg.sender, requestUri, new uint256[](0));\n    //     s_requestNumber++;\n    // }\n\n    function acceptJoiningRequest(uint256 requestId) public {\n        require(s_addressToMemberId[msg.sender] != 0, \"Not a member\");\n        require(\n            s_idToMemberRequest[requestId].memberAddress != address(0),\n            \"Request does not exist\"\n        );\n        require(\n            s_memberRequestAcceptances[abi.encode(msg.sender, requestId)] == false,\n            \"Already accepted\"\n        );\n        s_memberRequestAcceptances[abi.encode(msg.sender, requestId)] = true;\n        s_idToMemberRequest[requestId].accepted += 1;\n    }\n\n    function makeJoiningRequest(string memory uri) public payable {\n        require(msg.value == i_amount, \"Amount sent isn't correct\");\n        require(block.timestamp < i_requestBefore, \"Adding member is not valid anymore\");\n        require(s_addressToMemberId[msg.sender] == 0, \"Member already exists\");\n        require(s_addressToRequestId[msg.sender] == 0, \"Request already exists\");\n        if (i_useLiquidityPool) {\n            IERC20 token = IERC20(i_liquidityTokenAddress);\n            token.transferFrom(msg.sender, address(this), i_liquidityTokenAmount);\n        }\n        s_idToMemberRequest[s_requestNumber] = MemberRequest(msg.sender, uri, 0);\n        s_addressToRequestId[msg.sender] = s_requestNumber;\n        s_requestNumber++;\n    }\n\n    // here amount is in native token\n    function requestForInsurance(string memory baseUri, uint256 amount) public {\n        require(block.timestamp > i_validity, \"Contract is not valid anymore\");\n        require(block.timestamp < i_judgingStartTime, \"Judging already started\");\n        require(s_addressToMemberId[msg.sender] != 0, \"Not a member\");\n        require(s_addressToClaimId[msg.sender] == 0, \"Insurance already exists\");\n        s_addressToClaimId[msg.sender] = s_claimNumber;\n        s_idToClaimRequest[s_claimNumber] = InsuranceClaimRequest(msg.sender, baseUri, amount, 0);\n        s_totalClaimAmountRequested += amount;\n        s_claimNumber++;\n    }\n\n    // judges will judge insurance claim requests\n    function updateInsurance(uint256 claimId, bool accepted, string memory reasonUri) public {\n        require(block.timestamp > i_judgingStartTime, \"Judging not started yet\");\n        require(block.timestamp < i_judgingEndTime, \"Judging already ended\");\n        require(s_addressToJudgeId[msg.sender] != 0, \"Not a judge\");\n        require(\n            s_idToClaimRequest[claimId].memberAddress != address(0),\n            \"Insurance does not exist\"\n        );\n        if (\n            (s_judgements[abi.encode(msg.sender, claimId)].accepted == false &&\n                bytes(reasonUri).length != 0) ||\n            (s_judgements[abi.encode(msg.sender, claimId)].accepted == true)\n        ) {\n            revert(\"Already updated\");\n        }\n        if (!accepted) {\n            require(bytes(reasonUri).length != 0, \"Reason uri is empty\");\n        }\n        s_judgements[abi.encode(msg.sender, claimId)] = Judgement(accepted, reasonUri);\n        if (accepted) {\n            s_idToClaimRequest[claimId].accepted += 1;\n        }\n        s_judged[msg.sender] += 1;\n    }\n\n    function selectJudges(uint256 randomNumber) public onlyOwner {\n        require(block.timestamp > i_judgingStartTime, \"Judging not started yet\");\n        require(block.timestamp < i_judgingEndTime, \"Judging already ended\");\n        require(s_isMinMembersReachedCalculated == false, \"Judges already selected\");\n        if (!s_isMinMembersReachedCalculated && s_memberNumber - 1 < i_minMembers) {\n            s_isMinMembersReachedCalculated = true;\n            s_isMinMembersReached = false;\n            for (uint256 i = 1; i < s_memberNumber; i++) {\n                s_balance[s_idToMemberAddress[i]] += i_amount;\n            }\n            return;\n        }\n        s_isMinMembersReachedCalculated = true;\n        s_isMinMembersReached = true;\n        uint256 index = randomNumber % (s_memberNumber - 1);\n        for (uint256 i = 1; i <= i_judgesLength; i++) {\n            address judgeAddress = s_idToMemberAddress[index + i]; // as index for member starts from 1\n            if (s_addressToJudgeId[judgeAddress] != 0) {\n                i--;\n                index = (index + index + i + 1) % (s_memberNumber - 1); // 2 * index + 1\n                continue;\n            }\n            index = (index + index + i) % (s_memberNumber - 1); // 2 * index + 1\n            s_addressToJudgeId[judgeAddress] = i;\n            s_idToJudgeAddress[i] = judgeAddress;\n        }\n    }\n\n    function fullfillRequests() public {\n        require(block.timestamp > i_judgingEndTime, \"Judging not ended yet\");\n        require(s_isFinalJudgementCalculated == false, \"Already fullfilled\");\n\n        uint256 amountPerMember = i_amount; // in native token\n        // remove liquidity from pool\n        if (i_useLiquidityPool) {\n            IExchange(i_exchangeAddress).removeLiquidity(\n                IERC20(i_exchangeAddress).balanceOf(address(this))\n            );\n            uint256 balance = address(this).balance; // native token balance\n            amountPerMember = (balance * 2) / (s_memberNumber - 1); // total balance ( in native token ) is total native token + total liquidity token and rate of liquidity token is with respect reserve of both tokens. Therefore, total liquidity token = total native token.\n        }\n\n        s_isFinalJudgementCalculated = true;\n        if (s_isMinMembersReachedCalculated && !s_isMinMembersReached) {\n            return;\n        }\n        // if no judges were selected, then pay all members\n        if (!s_isMinMembersReachedCalculated) {\n            s_isMinMembersReachedCalculated = true;\n            s_isMinMembersReached = false;\n            for (uint256 i = 1; i < s_memberNumber; i++) {\n                s_balance[s_idToMemberAddress[i]] += amountPerMember;\n            }\n            return;\n        }\n\n        // check whether there's atleast one judge who fullfilled his job that is accepted everyone's request\n        for (uint256 i = 1; i <= i_judgesLength; i++) {\n            if (s_judged[s_idToJudgeAddress[i]] == s_claimNumber - 1) {\n                s_judgesFullfilledJobs.push(JudgementJobFullfilled(i, 0));\n            }\n        }\n\n        // pay everyone except the judges as no one fullfilled their job\n        if (s_judgesFullfilledJobs.length == 0) {\n            uint256 amountForEachMember = (amountPerMember + i_judgesLength) / (s_memberNumber - 1);\n            for (uint256 i = 1; i < s_memberNumber; i++) {\n                if (s_addressToJudgeId[s_idToMemberAddress[i]] == 0) {\n                    s_balance[s_idToMemberAddress[i]] += amountForEachMember; // no judge will get their money back\n                }\n            }\n            return;\n        }\n\n        // pay all the judges who fullfilled their job\n        uint256 amountForEachJudge = ((i_percentageDividedIntoJudges *\n            (s_memberNumber - 1) *\n            amountPerMember) / (100 * s_judgesFullfilledJobs.length));\n        uint256 amountLeftForMembers = ((amountPerMember * (s_memberNumber - 1)) -\n            (amountForEachJudge * s_judgesFullfilledJobs.length));\n        for (uint256 i = 0; i < s_judgesFullfilledJobs.length; i++) {\n            s_judgesFullfilledJobs[i].amount = amountForEachJudge;\n            s_balance[s_idToJudgeAddress[s_judgesFullfilledJobs[i].judgeId]] += amountForEachJudge;\n        }\n\n        // check whether atleast one claim is accepted by majority of judges && calculate amount to be paid to insuranceClaimers who are accepted\n        for (uint256 i = 1; i < s_claimNumber; i++) {\n            if (s_idToClaimRequest[i].accepted > (i_judgesLength / 2)) {\n                s_totalClaimAmountAccepted += s_idToClaimRequest[i].amount;\n                s_claimAccepted.push(ClaimAccepted(i, 0));\n            }\n        }\n\n        // pay everyone except the judges as no one fullfilled their job\n        if (s_claimAccepted.length == 0) {\n            uint256 amountForEachMember = amountLeftForMembers / (s_memberNumber - 1);\n\n            // pay all the judges who fullfilled their job as amountForEachMember\n            for (uint256 i = 0; i < s_judgesFullfilledJobs.length; i++) {\n                s_balance[\n                    s_idToJudgeAddress[s_judgesFullfilledJobs[i].judgeId]\n                ] += amountForEachMember;\n            }\n            // pay everyone except the judges as amountForEachMember as either no one fullfilled their job or who fullfilled their job already got their money\n            for (uint256 i = 1; i < s_memberNumber; i++) {\n                if (s_addressToJudgeId[s_idToMemberAddress[i]] == 0) {\n                    s_balance[s_idToMemberAddress[i]] += amountForEachMember;\n                }\n            }\n            return;\n        }\n        uint256 extraAmount = 0;\n        // calculate extra amount to be paid to insuranceClaimers who are accepted\n        if (s_totalClaimAmountAccepted >= amountLeftForMembers) {\n            extraAmount = s_totalClaimAmountAccepted - amountLeftForMembers;\n            amountLeftForMembers = 0;\n        } else {\n            amountLeftForMembers -= s_totalClaimAmountAccepted;\n        }\n\n        // pay insuranceClaimers who are accepted\n        for (uint256 i = 0; i < s_claimAccepted.length; i++) {\n            uint256 amountRequested = s_idToClaimRequest[s_claimAccepted[i].claimId].amount;\n            uint256 amountToPay = amountRequested -\n                ((amountRequested * extraAmount) / s_totalClaimAmountAccepted);\n            s_claimAccepted[i].amount = amountToPay;\n            s_balance[s_idToClaimRequest[s_claimAccepted[i].claimId].memberAddress] += amountToPay;\n        }\n        // if there's any amount left, pay it to everyone\n        if (amountLeftForMembers > 0) {\n            uint256 amountForEachMember = amountLeftForMembers / (s_memberNumber - 1);\n            // pay all the judges who fullfilled their job as amountForEachMember\n            for (uint256 i = 0; i < s_judgesFullfilledJobs.length; i++) {\n                s_balance[\n                    s_idToJudgeAddress[s_judgesFullfilledJobs[i].judgeId]\n                ] += amountForEachMember;\n            }\n            // pay everyone except the judges as amountForEachMember as either no one fullfilled their job or who fullfilled their job already got their money\n            for (uint256 i = 1; i < s_memberNumber; i++) {\n                if (s_addressToJudgeId[s_idToMemberAddress[i]] == 0) {\n                    s_balance[s_idToMemberAddress[i]] += amountForEachMember;\n                }\n            }\n        }\n    }\n\n    function withdraw() public {\n        require(s_balance[msg.sender] > 0, \"No balance\");\n        if (!i_useLiquidityPool) {\n            uint256 amount = s_balance[msg.sender];\n            s_balance[msg.sender] = 0;\n            payable(msg.sender).transfer(amount);\n        } else {\n            uint256 amount = 0;\n            uint256 tokenAmount = 0;\n            uint256 balance = address(this).balance;\n            uint256 tokenBalance = IERC20(i_liquidityTokenAddress).balanceOf(address(this));\n\n            // half of the amount will be paid in native token and half in liquidity token to avoid price slippage\n            amount = s_balance[msg.sender] / 2;\n            tokenAmount = (amount * tokenBalance) / balance;\n\n            s_balance[msg.sender] = 0;\n\n            payable(msg.sender).transfer(amount);\n            IERC20(i_liquidityTokenAddress).transfer(msg.sender, tokenAmount);\n        }\n        // (bool success, ) = payable(msg.sender).call{value: amount}(\"\");\n        // if (!success) {\n        //     revert WithdrawFailed();\n        // }\n    }\n\n    // function withdrawMemberRequest() public {\n    //     require(s_addressToRequestId[msg.sender] != 0, \"No request\");\n    //     require(block.timestamp > i_requestBefore, \"Time is still left\");\n    //     uint256 amount = i_amount;\n    //     uint256 id = s_addressToRequestId[msg.sender];\n    //     s_idToMemberRequest[id] = MemberRequest(address(0), \"\", 0);\n    //     s_addressToRequestId[msg.sender] = 0;\n    //     (bool success, ) = payable(msg.sender).call{value: amount}(\"\");\n    //     if (!success) {\n    //         revert WithdrawFailed();\n    //     }\n    // }\n\n    function getBaseUri() public view returns (string memory) {\n        return s_baseUri;\n    }\n\n    function getMinMembers() public view returns (uint256) {\n        return i_minMembers;\n    }\n\n    function getRequestBefore() public view returns (uint256) {\n        return i_requestBefore;\n    }\n\n    function getValidity() public view returns (uint256) {\n        return i_validity;\n    }\n\n    function getJudgingStartTime() public view returns (uint256) {\n        return i_judgingStartTime;\n    }\n\n    function getJudgingEndTime() public view returns (uint256) {\n        return i_judgingEndTime;\n    }\n\n    function getJudgesLength() public view returns (uint256) {\n        return i_judgesLength;\n    }\n\n    function getAmount() public view returns (uint256) {\n        return i_amount;\n    }\n\n    function getTotalMembers() public view returns (uint256) {\n        return s_memberNumber - 1;\n    }\n\n    function getDeadlineMet() public view returns (bool) {\n        return getTotalMembers() >= i_minMembers;\n    }\n\n    function getMemberById(uint256 id) public view returns (address) {\n        return s_idToMemberAddress[id];\n    }\n\n    function getMemberIdByAddress(address memberAddress) public view returns (uint256) {\n        return s_addressToMemberId[memberAddress];\n    }\n\n    function getTotalRequests() public view returns (uint256) {\n        return s_requestNumber - 1;\n    }\n\n    function getRequestById(uint256 id) public view returns (MemberRequest memory) {\n        return s_idToMemberRequest[id];\n    }\n\n    function getRequestIdByAddress(address memberAddress) public view returns (uint256) {\n        return s_addressToRequestId[memberAddress];\n    }\n\n    function getMemberRequestAcceptance(\n        uint256 memberId,\n        uint256 requestId\n    ) public view returns (bool) {\n        return s_memberRequestAcceptances[abi.encode(s_idToMemberAddress[memberId], requestId)];\n    }\n\n    function getTotalClaims() public view returns (uint256) {\n        return s_claimNumber - 1;\n    }\n\n    function getClaimById(uint256 id) public view returns (InsuranceClaimRequest memory) {\n        return s_idToClaimRequest[id];\n    }\n\n    function getClaimIdByAddress(address memberAddress) public view returns (uint256) {\n        return s_addressToClaimId[memberAddress];\n    }\n\n    function getJudgeById(uint256 id) public view returns (address) {\n        return s_idToJudgeAddress[id];\n    }\n\n    function getJudgeIdByAddress(address memberAddress) public view returns (uint256) {\n        return s_addressToJudgeId[memberAddress];\n    }\n\n    function getJudgement(uint256 judgeId, uint256 claimId) public view returns (Judgement memory) {\n        return s_judgements[abi.encode(s_idToJudgeAddress[judgeId], claimId)];\n    }\n\n    function getJudged(address judgeAddress) public view returns (uint256) {\n        return s_judged[judgeAddress];\n    }\n\n    function getJudgesFullFilledJobs() public view returns (JudgementJobFullfilled[] memory) {\n        return s_judgesFullfilledJobs;\n    }\n\n    function getTotalJudgesFullFilledJobs() public view returns (uint256) {\n        return s_judgesFullfilledJobs.length;\n    }\n\n    function getClaimAcceptedLength() public view returns (uint256) {\n        return s_claimAccepted.length;\n    }\n\n    function getClaimsAccepted() public view returns (ClaimAccepted[] memory) {\n        return s_claimAccepted;\n    }\n\n    function getTotalClaimAmountRequested() public view returns (uint256) {\n        return s_totalClaimAmountRequested;\n    }\n\n    function getTotalClaimAmountAccepted() public view returns (uint256) {\n        return s_totalClaimAmountAccepted;\n    }\n\n    function getIsClaimFullfilled() public view returns (bool) {\n        return s_isFinalJudgementCalculated;\n    }\n\n    function getPercentageDividedIntoJudges() public view returns (uint256) {\n        return i_percentageDividedIntoJudges;\n    }\n\n    function getBalance(address memberAddress) public view returns (uint256) {\n        return s_balance[memberAddress];\n    }\n\n    function getIsMinimumMembersReachedCalculated() public view returns (bool) {\n        return s_isMinMembersReachedCalculated;\n    }\n\n    function getIsJudgeSelected() public view returns (bool) {\n        return s_isMinMembersReachedCalculated; // both are calculated at the same time\n    }\n\n    function getIsMinimumMembersReached() public view returns (bool) {\n        return s_isMinMembersReached;\n    }\n\n    function getGroupId() public view returns (string memory) {\n        return s_groupId;\n    }\n\n    // function getIsAnyClaimAccepted() public view returns (bool) {\n    //     return s_claimAccepted.length > 0;\n    // }\n\n    // function getIsAnyJudgeFullfilledTheirJob() public view returns (bool) {\n    //     return s_judgesFullfilledJobs.length > 0;\n    // }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\nimport \"./Insurance.sol\";\nimport \"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\";\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\n\ncontract Factory is AutomationCompatibleInterface, VRFConsumerBaseV2 {\n    struct ContractInfo {\n        address contractAddress;\n        uint256 judgingStartTime;\n        uint256 judgingEndTime;\n    }\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\n    uint64 private immutable i_subscriptionId;\n    bytes32 private immutable i_gasLane;\n    uint32 private immutable i_callbackGasLimit;\n\n    address private immutable i_exchangeFactoryAddress;\n\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\n    uint32 private constant NUM_WORDS = 1;\n\n    mapping(uint256 => address) private s_requestIdToContractAddress;\n\n    // address[] private s_insuranceContracts;\n    ContractInfo[] private s_contractInfos;\n\n    constructor(\n        address vrfCoordinatorV2,\n        uint64 subscriptionId,\n        bytes32 gasLane, // keyH\n        uint32 callbackGasLimit,\n        address exchangeFactoryAddress // address of exchange factory contract\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\n        i_gasLane = gasLane;\n        i_subscriptionId = subscriptionId;\n        i_callbackGasLimit = callbackGasLimit;\n        i_exchangeFactoryAddress = exchangeFactoryAddress;\n    }\n\n    function createInsurance(\n        string memory baseUri,\n        uint256 minMembers,\n        uint256 requestTime, // (in seconds) time before one can make a request\n        uint256 validity, // (in seconds) insurance valid after startBefore seconds and user can claim insurance after validity\n        uint256 claimTime, // (in seconds) time before use can make a insurance claim request, after this time judging will start.\n        uint256 judgingTime, // (in seconds) time before judges should judge insurance claim requests.\n        uint256 judgesLength, // number of judges\n        uint256 amount, // amount everyone should put in the pool\n        uint256 percentDivideIntoJudges, // percent of total pool amount that should be divided into judges (total pool amount = amount * members.length where members.length == s_memberNumber - 1) (only valid for judges who had judged every claim request)\n        bool useLiquidityPool, // if true, the insurance contract will add funds to liquidity pool\n        address liquidityTokenAddress, // address of liquidity token\n        uint256 liquidityTokenAmount, // amount of liquidity token to add to liquidity pool\n        string memory groupId\n    ) public payable returns (address) {\n        Insurance newInsurance = new Insurance(\n            baseUri,\n            minMembers,\n            requestTime,\n            validity,\n            claimTime,\n            judgingTime,\n            judgesLength,\n            amount,\n            percentDivideIntoJudges,\n            i_exchangeFactoryAddress,\n            useLiquidityPool,\n            liquidityTokenAddress,\n            liquidityTokenAmount,\n            groupId\n        );\n\n        uint256 judgingStartTime = block.timestamp + requestTime + validity + claimTime;\n\n        // s_insuranceContracts.push(address(newInsurance));\n        uint256 judgingEndTime = judgingStartTime + judgingTime;\n\n        s_contractInfos.push(ContractInfo(address(newInsurance), judgingStartTime, judgingEndTime));\n        return address(newInsurance);\n    }\n\n    // Assumes the subscription is funded sufficiently.\n    function getRandomNumbers(address contractAddress) public payable returns (uint256 requestId) {\n        requestId = i_vrfCoordinator.requestRandomWords(\n            i_gasLane,\n            i_subscriptionId,\n            REQUEST_CONFIRMATIONS,\n            i_callbackGasLimit,\n            NUM_WORDS\n        );\n        s_requestIdToContractAddress[requestId] = contractAddress;\n    }\n\n    function performUpkeep(bytes calldata performData) external override {\n        (uint256 index, uint256 which) = abi.decode(performData, (uint256, uint256));\n        address contractAddress = s_contractInfos[index].contractAddress;\n        if (which == 0) {\n            s_contractInfos[index].judgingStartTime = 0;\n            getRandomNumbers(contractAddress);\n            return;\n        }\n        s_contractInfos[index].judgingEndTime = 0;\n        Insurance(contractAddress).fullfillRequests();\n    }\n\n    /**\n     * @dev This is the function that Chainlink VRF node\n     * calls.\n     */\n    function fulfillRandomWords(\n        uint256 requestId /* requestId */,\n        uint256[] memory randomWords\n    ) internal override {\n        Insurance insurance = Insurance(s_requestIdToContractAddress[requestId]);\n        insurance.selectJudges(randomWords[0]);\n    }\n\n    function checkUpkeep(\n        bytes calldata /* checkData */\n    ) external view override returns (bool upkeepNeeded, bytes memory performData) {\n        upkeepNeeded = false;\n        for (uint256 i = 0; i < s_contractInfos.length; i++) {\n            if (\n                s_contractInfos[i].judgingStartTime != 0 &&\n                s_contractInfos[i].judgingStartTime < block.timestamp &&\n                s_contractInfos[i].judgingEndTime > block.timestamp\n            ) {\n                upkeepNeeded = true;\n                performData = abi.encode(i, 0); // index, which (0 = getRandomNumbers for selecting judges, 1 = fullfillRequests for fullfilling insurance claim requests)\n                break;\n            }\n            if (\n                s_contractInfos[i].judgingEndTime != 0 &&\n                s_contractInfos[i].judgingEndTime < block.timestamp\n            ) {\n                upkeepNeeded = true;\n                performData = abi.encode(i, 1);\n                break;\n            }\n        }\n    }\n\n    function getContracts() public view returns (ContractInfo[] memory) {\n        return s_contractInfos;\n    }\n\n    function getContractsLength() public view returns (uint256) {\n        return s_contractInfos.length;\n    }\n\n    function getContract(uint256 index) public view returns (ContractInfo memory) {\n        return s_contractInfos[index];\n    }\n\n    // function getContractAddress(uint256 index) public view returns (address) {\n    //     return s_contractInfos[index].contractAddress;\n    // }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/AutomationCompatible.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AutomationBase.sol\";\nimport \"./interfaces/AutomationCompatibleInterface.sol\";\n\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/AutomationBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract AutomationBase {\n  error OnlySimulatedBackend();\n\n  /**\n   * @notice method that allows it to be simulated via eth_call by checking that\n   * the sender is the zero address.\n   */\n  function preventExecution() internal view {\n    if (tx.origin != address(0)) {\n      revert OnlySimulatedBackend();\n    }\n  }\n\n  /**\n   * @notice modifier that allows it to be simulated via eth_call by checking\n   * that the sender is the zero address.\n   */\n  modifier cannotExecute() {\n    preventExecution();\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "contracts/Token.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract Token is ERC20 {\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {}\n\n    function mint(address to, uint256 amount) public {\n        _mint(to, amount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}