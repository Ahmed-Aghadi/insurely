{
  "address": "0x7Fc29F9cFAD302505B7Ece08eB94bd2f209bb6A3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "createExchange",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "getExchange",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenToExchange",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc666f233fa7b5d01e69b4382ae9813c36a89afce1190c44c9c24e4bea6cc5b7a",
  "receipt": {
    "to": null,
    "from": "0x0de82DCC40B8468639251b089f8b4A4400022e04",
    "contractAddress": "0x7Fc29F9cFAD302505B7Ece08eB94bd2f209bb6A3",
    "transactionIndex": 0,
    "gasUsed": "1704705",
    "logsBloom": "0x
    "blockHash": "0x000047240000112142e0b8be3b32556914f3ba194becc4bb72d4d21c918aba1d",
    "transactionHash": "0xc666f233fa7b5d01e69b4382ae9813c36a89afce1190c44c9c24e4bea6cc5b7a",
    "logs": [],
    "blockNumber": 14342181,
    "cumulativeGasUsed": "1704705",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fcce8870c400fee294c11bae8163b4de",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"createExchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getExchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenToExchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ExchangeFactory.sol\":\"ExchangeFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Exchange.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IExchange {\\n    function ethToTokenSwap(uint256 _minTokens) external payable;\\n\\n    function ethToTokenTransfer(uint256 _minTokens, address _recipient) external payable;\\n}\\n\\ninterface IExchangeFactory {\\n    function getExchange(address _tokenAddress) external returns (address);\\n}\\n\\ncontract Exchange is ERC20 {\\n    address public tokenAddress;\\n    address public factoryAddress;\\n\\n    constructor(address _token) ERC20(\\\"Swap\\\", \\\"SWAP\\\") {\\n        require(_token != address(0), \\\"invalid token address\\\");\\n\\n        tokenAddress = _token;\\n        factoryAddress = msg.sender;\\n    }\\n\\n    function addLiquidity(uint256 _tokenAmount) public payable returns (uint256) {\\n        if (getReserve() == 0) {\\n            IERC20 token = IERC20(tokenAddress);\\n            token.transferFrom(msg.sender, address(this), _tokenAmount);\\n\\n            uint256 liquidity = address(this).balance;\\n            _mint(msg.sender, liquidity);\\n\\n            return liquidity;\\n        } else {\\n            uint256 ethReserve = address(this).balance - msg.value;\\n            uint256 tokenReserve = getReserve();\\n            uint256 tokenAmount = (msg.value * tokenReserve) / ethReserve;\\n            require(_tokenAmount >= tokenAmount, \\\"insufficient token amount\\\");\\n\\n            IERC20 token = IERC20(tokenAddress);\\n            token.transferFrom(msg.sender, address(this), tokenAmount);\\n\\n            uint256 liquidity = (msg.value * totalSupply()) / ethReserve;\\n            _mint(msg.sender, liquidity);\\n\\n            return liquidity;\\n        }\\n    }\\n\\n    function removeLiquidity(uint256 _amount) public returns (uint256, uint256) {\\n        require(_amount > 0, \\\"invalid amount\\\");\\n\\n        uint256 ethAmount = (address(this).balance * _amount) / totalSupply();\\n        uint256 tokenAmount = (getReserve() * _amount) / totalSupply();\\n\\n        _burn(msg.sender, _amount);\\n        payable(msg.sender).transfer(ethAmount);\\n        IERC20(tokenAddress).transfer(msg.sender, tokenAmount);\\n\\n        return (ethAmount, tokenAmount);\\n    }\\n\\n    function getReserve() public view returns (uint256) {\\n        return IERC20(tokenAddress).balanceOf(address(this));\\n    }\\n\\n    function getTokenAmount(uint256 _ethSold) public view returns (uint256) {\\n        require(_ethSold > 0, \\\"ethSold is too small\\\");\\n\\n        uint256 tokenReserve = getReserve();\\n\\n        return getAmount(_ethSold, address(this).balance, tokenReserve);\\n    }\\n\\n    function getEthAmount(uint256 _tokenSold) public view returns (uint256) {\\n        require(_tokenSold > 0, \\\"tokenSold is too small\\\");\\n\\n        uint256 tokenReserve = getReserve();\\n\\n        return getAmount(_tokenSold, tokenReserve, address(this).balance);\\n    }\\n\\n    function ethToToken(uint256 _minTokens, address recipient) private {\\n        uint256 tokenReserve = getReserve();\\n        uint256 tokensBought = getAmount(\\n            msg.value,\\n            address(this).balance - msg.value,\\n            tokenReserve\\n        );\\n\\n        require(tokensBought >= _minTokens, \\\"insufficient output amount\\\");\\n\\n        IERC20(tokenAddress).transfer(recipient, tokensBought);\\n    }\\n\\n    function ethToTokenTransfer(uint256 _minTokens, address _recipient) public payable {\\n        ethToToken(_minTokens, _recipient);\\n    }\\n\\n    function ethToTokenSwap(uint256 _minTokens) public payable {\\n        ethToToken(_minTokens, msg.sender);\\n    }\\n\\n    function tokenToEthSwap(uint256 _tokensSold, uint256 _minEth) public {\\n        uint256 tokenReserve = getReserve();\\n        uint256 ethBought = getAmount(_tokensSold, tokenReserve, address(this).balance);\\n\\n        require(ethBought >= _minEth, \\\"insufficient output amount\\\");\\n\\n        IERC20(tokenAddress).transferFrom(msg.sender, address(this), _tokensSold);\\n        payable(msg.sender).transfer(ethBought);\\n    }\\n\\n    function tokenToTokenSwap(\\n        uint256 _tokensSold,\\n        uint256 _minTokensBought,\\n        address _tokenAddress\\n    ) public {\\n        address exchangeAddress = IExchangeFactory(factoryAddress).getExchange(_tokenAddress);\\n        require(\\n            exchangeAddress != address(this) && exchangeAddress != address(0),\\n            \\\"invalid exchange address\\\"\\n        );\\n\\n        uint256 tokenReserve = getReserve();\\n        uint256 ethBought = getAmount(_tokensSold, tokenReserve, address(this).balance);\\n\\n        IERC20(tokenAddress).transferFrom(msg.sender, address(this), _tokensSold);\\n\\n        IExchange(exchangeAddress).ethToTokenTransfer{value: ethBought}(\\n            _minTokensBought,\\n            msg.sender\\n        );\\n    }\\n\\n    function getAmount(\\n        uint256 inputAmount,\\n        uint256 inputReserve,\\n        uint256 outputReserve\\n    ) private pure returns (uint256) {\\n        require(inputReserve > 0 && outputReserve > 0, \\\"invalid reserves\\\");\\n\\n        uint256 inputAmountWithFee = inputAmount * 99;\\n        uint256 numerator = inputAmountWithFee * outputReserve;\\n        uint256 denominator = (inputReserve * 100) + inputAmountWithFee;\\n\\n        return numerator / denominator;\\n    }\\n}\\n\",\"keccak256\":\"0x19ccbff17213013744174e9acad741bba7d362c0f584a05af50f7e4e87f0de4e\",\"license\":\"Unlicense\"},\"contracts/ExchangeFactory.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Exchange.sol\\\";\\n\\ncontract ExchangeFactory {\\n    mapping(address => address) public tokenToExchange;\\n\\n    function createExchange(address _tokenAddress) public returns (address) {\\n        require(_tokenAddress != address(0), \\\"invalid token address\\\");\\n        require(tokenToExchange[_tokenAddress] == address(0), \\\"exchange already exists\\\");\\n\\n        Exchange exchange = new Exchange(_tokenAddress);\\n        tokenToExchange[_tokenAddress] = address(exchange);\\n\\n        return address(exchange);\\n    }\\n\\n    function getExchange(address _tokenAddress) public view returns (address) {\\n        return tokenToExchange[_tokenAddress];\\n    }\\n}\\n\",\"keccak256\":\"0xbdd872ab4da09cec8995bdc41441bde47c02b430ef1d4ba579ee7267d6473b5f\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657611de1908161001d8239f35b50600080fdfe6080604052600436101561001257600080fd5b6000803560e01c806306f2bf62146100a05780631648f38e146100855763c3c49a631461003f5750600080fd5b34610082575061007e610072610054366100b2565b6001600160a01b039081166000908152602081905260409020541690565b604051918291826100e2565b0390f35b80fd5b5034610082575061007e61007261009b366100b2565b61017a565b5034610082575061007e610072610054365b60209060031901126100dc576004356001600160a01b0381168114156100d55790565b5050600080fd5b50600080fd5b6001600160a01b03909116815260200190565b6001600160a01b0316600090815260208190526040902090565b1561011657565b5060405162461bcd60e51b815260206004820152601760248201527665786368616e676520616c72656164792065786973747360481b6044820152606490fd5b50634e487b7160e01b600052604160045260246000fd5b506040513d6000823e3d90fd5b6001600160a01b03818116156102405781610223916101c36101bd6101b16101a4610204976100f5565b546001600160a01b031690565b6001600160a01b031690565b1561010f565b604051806101ef84611b1d808401906001600160401b03821185831017610233575b61028185396100e2565b03906000f08015610226575b169283916100f5565b80546001600160a01b0319166001600160a01b03909216919091179055565b90565b61022e61016d565b6101fb565b61023b610156565b6101e5565b505060405162461bcd60e51b8152602060048201526015602482015274696e76616c696420746f6b656e206164647265737360581b604482015260649150fdfe608060405234620001f65762001b1d80380390816200001e8162000212565b9283928339602092839181010312620001ef57516001600160a01b03811680821415620001e7576200004f62000247565b92630537761760e41b818501526200006662000247565b630535741560e41b82820152845190916001600160401b038211620001d7575b6200009e8262000098600354620002c2565b62000301565b80601f83116001146200013a57509181620000e292620000ea95946200010c986000926200012e575b50508160011b916000199060031b1c191617600355620003b3565b15156200027c565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b600680546001600160a01b031916331790556040516116659081620004b88239f35b015190503880620000c7565b6003600052601f198316969091907fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b926000905b898210620001be57505092620000ea959492600192620000e295836200010c9b10620001a4575b505050811b01600355620003b3565b015160001960f88460031b161c1916905538808062000195565b806001859682949686015181550195019301906200016e565b620001e1620001fb565b62000086565b505050600080fd5b5050600080fd5b600080fd5b50634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f191682016001600160401b038111838210176200023857604052565b62000242620001fb565b604052565b60408051919082016001600160401b038111838210176200026c575b60405260048252565b62000276620001fb565b62000263565b156200028457565b5060405162461bcd60e51b8152602060048201526015602482015274696e76616c696420746f6b656e206164647265737360581b6044820152606490fd5b90600182811c92168015620002f6575b6020831014620002de57565b5050634e487b7160e01b600052602260045260246000fd5b91607f1691620002d2565b601f81116200030e575050565b6000906003825260208220906020601f850160051c830194106200034f575b601f0160051c01915b8281106200034357505050565b81815560010162000336565b90925082906200032d565b601f811162000367575050565b6000906004825260208220906020601f850160051c83019410620003a8575b601f0160051c01915b8281106200039c57505050565b8181556001016200038f565b909250829062000386565b80519091906001600160401b038111620004a7575b620003e081620003da600454620002c2565b6200035a565b602080601f83116001146200041f575081929360009262000413575b50508160011b916000199060031b1c191617600455565b015190503880620003fc565b6004600052601f198316949091907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b926000905b8782106200048e57505083600195961062000474575b505050811b01600455565b015160001960f88460031b161c1916905538808062000469565b8060018596829496860151815501950193019062000453565b620004b1620001fb565b620003c856fe6040608081526004361015610015575b50600080fd5b600090813560e01c806306fdde03146103ed578063095ea7b3146103d057806318160ddd146103aa57806323b872dd1461038d578063313ce5671461036d578063389d9a401461035a578063395093511461033d57806351c6590a1461032657806359bf5d391461030a57806370a08231146102d85780638fc7a25d146102bc57806395d89b4114610295578063966dae0e1461026a5780639c8f9f23146102375780639d76ea581461020c578063a457c2d7146101ef578063a9059cbb146101c1578063c2507ac114610196578063dd62ed3e1461015c578063e0486c8a14610144578063f7a7e324146101285763f979dcd714610114575061000f565b610125610120366104f5565b6112d6565b51f35b50346101405761012561013a3661056d565b916113f1565b5080fd5b50346101405761012561015636610557565b906112e1565b503461014057610192915061018261017d61017636610532565b919061077d565b6107b1565b5490519081529081906020820190565b0390f35b50346101405761019291506101b26101ad366104f5565b611144565b90519081529081906020820190565b50346101405761019291506101de6101d83661048b565b906107c8565b905191829182901515815260200190565b50346101405761019291506101de6102063661048b565b906108da565b503461014057610192915061022036610409565b60055490519182916001600160a01b03168261051f565b503461014057610192915061025361024e366104f5565b610ef4565b915190815260208101919091529081906040820190565b503461014057610192915061027e36610409565b60065490519182916001600160a01b03168261051f565b50346101405761019291506102a936610409565b6102b16106b8565b905191829182610422565b50346101405761019291506101b26102d3366104f5565b61119c565b50346101405761019291506101b26102ef36610507565b6001600160a01b031660009081526020819052604090205490565b503461014057610192915061031e36610409565b6101b26110d6565b5061019291506101b2610338366104f5565b610ce1565b50346101405761019291506101de6103543661048b565b906108af565b50610125610367366104d6565b9061123f565b509034610388575061037e36610409565b5160128152602090f35b809150fd5b50346101405761019291506101de6103a4366104aa565b916107e3565b50346101405761019291506103be36610409565b60025490519081529081906020820190565b50346101405761019291506101de6103e73661048b565b906107d8565b503461014057610192915061040136610409565b6102b16105c8565b600090600319011261000f57565b600091031261000f57565b919091602080825283519081818401526000945b828610610463575050806040939411610456575b601f01601f1916010190565b600083828401015261044a565b8581018201518487016040015294810194610436565b6001600160a01b038116141561000f57565b604090600319011261000f576004356104a381610479565b9060243590565b606090600319011261000f576004356104c281610479565b906024356104cf81610479565b9060443590565b604090600319011261000f57600435906024356104f281610479565b90565b602090600319011261000f5760043590565b602090600319011261000f576004356104f281610479565b6001600160a01b03909116815260200190565b604090600319011261000f5760043561054a81610479565b906024356104f281610479565b604090600319011261000f576004359060243590565b606090600319011261000f5760043590602435906044356104f281610479565b601f909101601f19168101906001600160401b038211908210176105b057604052565b5050634e487b7160e01b600052604160045260246000fd5b60405190600060035490600182811c928181169182156106ae575b60209182861084146106925785885287949360208601939291811561067a575060011461061c575b50505061061a9250038361058d565b565b600360005290949092507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b946000935b8285106106645750505061061a93500138808061060b565b865485850152958601958895509381019361064c565b60ff191684525061061a95505001905038808061060b565b5050634e487b7160e01b83525050602260045260249350915050fd5b93607f16936105e3565b60405190600060045490600182811c92818116918215610767575b60209182861084146106925785885287949360208601939291811561067a57506001146107095750505061061a9250038361058d565b600460005290949092507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b946000935b8285106107515750505061061a93500138808061060b565b8654858501529586019588955093810193610739565b93607f16936106d3565b6001600160a01b031690565b6001600160a01b0316600090815260016020526040902090565b6001600160a01b0316600090815260208190526040902090565b9060018060a01b0316600052602052604060002090565b906107d39133610a11565b600190565b906107d39133610ae5565b919060018060a01b03831660005260016020526108043360406000206107b1565b549260001984141561081b575b6107d39350610a11565b82841061083757610832836107d395033383610ae5565b610811565b5050505050606460405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b50634e487b7160e01b600052601160045260246000fd5b811981116108a3570190565b6108ab610880565b0190565b6108d36107d3923360005260016020526108cd8360406000206107b1565b54610897565b9033610ae5565b3360005260016020526108f18160406000206107b1565b5491808310610906576107d392039033610ae5565b50505050608460405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b1561096357565b5060405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b156109bc57565b5060405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b916001600160a01b038084169290918315610a8d57610a728260008051602061160283398151915294610a88941696610a4b88151561095c565b610a6c84610a5883610797565b54610a65828210156109b5565b0391610797565b55610797565b8054820190556040519081529081906020820190565b0390a3565b505050505050608460405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152fd5b6001600160a01b038082169291908315610b9a578216938415610b455780610b347f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259461017d610a889561077d565b556040519081529081906020820190565b505050505050608460405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152fd5b505050505050608460405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152fd5b818110610bfb570390565b610c03610880565b0390565b8060001904821181151516610c1a570290565b610c22610880565b0290565b8115610c30570490565b505050634e487b7160e01b600052601260045260246000fd5b15610c5057565b5060405162461bcd60e51b81526020600482015260196024820152781a5b9cdd59999a58da595b9d081d1bdad95b88185b5bdd5b9d603a1b6044820152606490fd5b90816020910312610cab5751801515811415610cab5790565b5050600080fd5b6001600160a01b03918216815291166020820152604081019190915260600190565b506040513d6000823e3d90fd5b610ce96110d6565b610d71576020610d2a600092610d0b610d06610d06600554610771565b610771565b906040519485809481936323b872dd60e01b8352303360048501610cb2565b03925af18015610d64575b610d46575b50476104f28133610e07565b610d5d90610d543d8261058d565b3d810190610c92565b5038610d3a565b610d6c610cd4565b610d35565b610ddb9060006020610dbe610d863447610bf0565b93610dad610da486610d9f610d996110d6565b34610c07565b610c26565b80921015610c49565b610d0b610d06610d06600554610771565b03925af18015610dfa575b610de5575b50610d9f60025434610c07565b6104f28133610e07565b610df390610d543d8261058d565b5038610dce565b610e02610cd4565b610dc9565b6001600160a01b038116918215610e5357602081610e44600094610e3c60008051602061160283398151915295600254610897565b600255610797565b818154019055604051908152a3565b50505050606460405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b15610ea257565b5060405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b6044820152606490fd5b6001600160a01b039091168152602081019190915260400190565b90610f00821515610e9b565b610f0a8247610c07565b610f36610f2f610f1d6002548094610c26565b92610d9f86610f2a6110d6565b610c07565b9333610fce565b8060008115610fc5575b600080809381933390f115610fb8575b610f61610d06610d06600554610771565b6020604051809263a9059cbb60e01b825281600081610f848a3360048401610ed9565b03925af18015610fab575b610f9857509190565b610fa690610d543d8261058d565b509190565b610fb3610cd4565b610f8f565b610fc0610cd4565b610f50565b506108fc610f40565b6001600160a01b03811690811561108457610fe881610797565b54838110611030578360008051602061160283398151915292611012600096610a88940391610797565b556110208160025403600255565b6040519081529081906020820190565b5050505050608460405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152fd5b50505050608460405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152fd5b6005546040516370a0823160e01b815230600482015290602090829060249082906001600160a01b03165afa908115611137575b600091611115575090565b906111203d8361058d565b6020823d8101031261113157505190565b91505080fd5b61113f610cd4565b61110a565b801561115e576104f2906111566110d6565b904790611550565b505060405162461bcd60e51b8152602060048201526014602482015273195d1a14dbdb19081a5cc81d1bdbc81cdb585b1b60621b6044820152606490fd5b80156111b5576104f2906111ae6110d6565b4791611550565b505060405162461bcd60e51b81526020600482015260166024820152751d1bdad95b94dbdb19081a5cc81d1bdbc81cdb585b1b60521b6044820152606490fd5b156111fc57565b5060405162461bcd60e51b815260206004820152601a6024820152791a5b9cdd59999a58da595b9d081bdd5d1c1d5d08185b5bdd5b9d60321b6044820152606490fd5b6020906112999261126f6112666112546110d6565b473481106112c9575b34900334611550565b928310156111f5565b60018060a01b036005541690600060405180968195829463a9059cbb60e01b845260048401610ed9565b03925af180156112bc575b6112ab5750565b6112b990610d543d8261058d565b50565b6112c4610cd4565b6112a4565b6112d1610880565b61125d565b61061a90339061123f565b90611331916112fc6112666112f46110d6565b479084611550565b60055461131590610d06906001600160a01b0316610771565b604051809481936323b872dd60e01b8352303360048501610cb2565b0392826020600096879687968780975af18015611387575b611372575b50818115611369575b3390f11561136157565b61061a610cd4565b506108fc611357565b61138090610d543d8261058d565b503861134e565b61138f610cd4565b611349565b90816020910312610cab57516104f281610479565b156113b057565b5060405162461bcd60e51b8152602060048201526018602482015277696e76616c69642065786368616e6765206164647265737360401b6044820152606490fd5b91906114246020611409610d06610d06600654610771565b93604051809381926303795fb160e11b83526004830161051f565b0381600080975af1908115611543575b8391611525575b506001600160a01b031690308214158061151c575b611459906113a9565b82602061148461147261146a6110d6565b479089611550565b96610d0b610d06610d06600554610771565b03925af1801561150f575b6114fa575b50813b156114f25760405162e2766960e61b8152600481019190915233602482015292839160449183915af180156114e5575b6114ce5750565b61061a906114dc3d8261058d565b3d810190610417565b6114ed610cd4565b6114c7565b505091505080fd5b61150890610d543d8261058d565b5038611494565b611517610cd4565b61148f565b50811515611450565b61153d91506115343d8261058d565b3d810190611394565b3861143b565b61154b610cd4565b611434565b90801515928380946115f8575b156115bc576064826104f29561159c9461158c606360001998808a048211811515166115af575b029586610c07565b96048311166115a2575b02610897565b90610c26565b6115aa610880565b611596565b6115b7610880565b611584565b5050505050606460405162461bcd60e51b815260206004820152601060248201526f696e76616c696420726573657276657360801b6044820152fd5b5080151561155d56feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa3646970667358221220722e4eb7880962dad488535ef258317156eee24a03c713b704d73050cc65e6276c6578706572696d656e74616cf564736f6c634300080c0041a36469706673582212206f6d27b6fd613aca7fccfaa3e5f5457f8a5793cb96c6590e3345368449707c406c6578706572696d656e74616cf564736f6c634300080c0041",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c806306f2bf62146100a05780631648f38e146100855763c3c49a631461003f5750600080fd5b34610082575061007e610072610054366100b2565b6001600160a01b039081166000908152602081905260409020541690565b604051918291826100e2565b0390f35b80fd5b5034610082575061007e61007261009b366100b2565b61017a565b5034610082575061007e610072610054365b60209060031901126100dc576004356001600160a01b0381168114156100d55790565b5050600080fd5b50600080fd5b6001600160a01b03909116815260200190565b6001600160a01b0316600090815260208190526040902090565b1561011657565b5060405162461bcd60e51b815260206004820152601760248201527665786368616e676520616c72656164792065786973747360481b6044820152606490fd5b50634e487b7160e01b600052604160045260246000fd5b506040513d6000823e3d90fd5b6001600160a01b03818116156102405781610223916101c36101bd6101b16101a4610204976100f5565b546001600160a01b031690565b6001600160a01b031690565b1561010f565b604051806101ef84611b1d808401906001600160401b03821185831017610233575b61028185396100e2565b03906000f08015610226575b169283916100f5565b80546001600160a01b0319166001600160a01b03909216919091179055565b90565b61022e61016d565b6101fb565b61023b610156565b6101e5565b505060405162461bcd60e51b8152602060048201526015602482015274696e76616c696420746f6b656e206164647265737360581b604482015260649150fdfe608060405234620001f65762001b1d80380390816200001e8162000212565b9283928339602092839181010312620001ef57516001600160a01b03811680821415620001e7576200004f62000247565b92630537761760e41b818501526200006662000247565b630535741560e41b82820152845190916001600160401b038211620001d7575b6200009e8262000098600354620002c2565b62000301565b80601f83116001146200013a57509181620000e292620000ea95946200010c986000926200012e575b50508160011b916000199060031b1c191617600355620003b3565b15156200027c565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b600680546001600160a01b031916331790556040516116659081620004b88239f35b015190503880620000c7565b6003600052601f198316969091907fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b926000905b898210620001be57505092620000ea959492600192620000e295836200010c9b10620001a4575b505050811b01600355620003b3565b015160001960f88460031b161c1916905538808062000195565b806001859682949686015181550195019301906200016e565b620001e1620001fb565b62000086565b505050600080fd5b5050600080fd5b600080fd5b50634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f191682016001600160401b038111838210176200023857604052565b62000242620001fb565b604052565b60408051919082016001600160401b038111838210176200026c575b60405260048252565b62000276620001fb565b62000263565b156200028457565b5060405162461bcd60e51b8152602060048201526015602482015274696e76616c696420746f6b656e206164647265737360581b6044820152606490fd5b90600182811c92168015620002f6575b6020831014620002de57565b5050634e487b7160e01b600052602260045260246000fd5b91607f1691620002d2565b601f81116200030e575050565b6000906003825260208220906020601f850160051c830194106200034f575b601f0160051c01915b8281106200034357505050565b81815560010162000336565b90925082906200032d565b601f811162000367575050565b6000906004825260208220906020601f850160051c83019410620003a8575b601f0160051c01915b8281106200039c57505050565b8181556001016200038f565b909250829062000386565b80519091906001600160401b038111620004a7575b620003e081620003da600454620002c2565b6200035a565b602080601f83116001146200041f575081929360009262000413575b50508160011b916000199060031b1c191617600455565b015190503880620003fc565b6004600052601f198316949091907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b926000905b8782106200048e57505083600195961062000474575b505050811b01600455565b015160001960f88460031b161c1916905538808062000469565b8060018596829496860151815501950193019062000453565b620004b1620001fb565b620003c856fe6040608081526004361015610015575b50600080fd5b600090813560e01c806306fdde03146103ed578063095ea7b3146103d057806318160ddd146103aa57806323b872dd1461038d578063313ce5671461036d578063389d9a401461035a578063395093511461033d57806351c6590a1461032657806359bf5d391461030a57806370a08231146102d85780638fc7a25d146102bc57806395d89b4114610295578063966dae0e1461026a5780639c8f9f23146102375780639d76ea581461020c578063a457c2d7146101ef578063a9059cbb146101c1578063c2507ac114610196578063dd62ed3e1461015c578063e0486c8a14610144578063f7a7e324146101285763f979dcd714610114575061000f565b610125610120366104f5565b6112d6565b51f35b50346101405761012561013a3661056d565b916113f1565b5080fd5b50346101405761012561015636610557565b906112e1565b503461014057610192915061018261017d61017636610532565b919061077d565b6107b1565b5490519081529081906020820190565b0390f35b50346101405761019291506101b26101ad366104f5565b611144565b90519081529081906020820190565b50346101405761019291506101de6101d83661048b565b906107c8565b905191829182901515815260200190565b50346101405761019291506101de6102063661048b565b906108da565b503461014057610192915061022036610409565b60055490519182916001600160a01b03168261051f565b503461014057610192915061025361024e366104f5565b610ef4565b915190815260208101919091529081906040820190565b503461014057610192915061027e36610409565b60065490519182916001600160a01b03168261051f565b50346101405761019291506102a936610409565b6102b16106b8565b905191829182610422565b50346101405761019291506101b26102d3366104f5565b61119c565b50346101405761019291506101b26102ef36610507565b6001600160a01b031660009081526020819052604090205490565b503461014057610192915061031e36610409565b6101b26110d6565b5061019291506101b2610338366104f5565b610ce1565b50346101405761019291506101de6103543661048b565b906108af565b50610125610367366104d6565b9061123f565b509034610388575061037e36610409565b5160128152602090f35b809150fd5b50346101405761019291506101de6103a4366104aa565b916107e3565b50346101405761019291506103be36610409565b60025490519081529081906020820190565b50346101405761019291506101de6103e73661048b565b906107d8565b503461014057610192915061040136610409565b6102b16105c8565b600090600319011261000f57565b600091031261000f57565b919091602080825283519081818401526000945b828610610463575050806040939411610456575b601f01601f1916010190565b600083828401015261044a565b8581018201518487016040015294810194610436565b6001600160a01b038116141561000f57565b604090600319011261000f576004356104a381610479565b9060243590565b606090600319011261000f576004356104c281610479565b906024356104cf81610479565b9060443590565b604090600319011261000f57600435906024356104f281610479565b90565b602090600319011261000f5760043590565b602090600319011261000f576004356104f281610479565b6001600160a01b03909116815260200190565b604090600319011261000f5760043561054a81610479565b906024356104f281610479565b604090600319011261000f576004359060243590565b606090600319011261000f5760043590602435906044356104f281610479565b601f909101601f19168101906001600160401b038211908210176105b057604052565b5050634e487b7160e01b600052604160045260246000fd5b60405190600060035490600182811c928181169182156106ae575b60209182861084146106925785885287949360208601939291811561067a575060011461061c575b50505061061a9250038361058d565b565b600360005290949092507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b946000935b8285106106645750505061061a93500138808061060b565b865485850152958601958895509381019361064c565b60ff191684525061061a95505001905038808061060b565b5050634e487b7160e01b83525050602260045260249350915050fd5b93607f16936105e3565b60405190600060045490600182811c92818116918215610767575b60209182861084146106925785885287949360208601939291811561067a57506001146107095750505061061a9250038361058d565b600460005290949092507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b946000935b8285106107515750505061061a93500138808061060b565b8654858501529586019588955093810193610739565b93607f16936106d3565b6001600160a01b031690565b6001600160a01b0316600090815260016020526040902090565b6001600160a01b0316600090815260208190526040902090565b9060018060a01b0316600052602052604060002090565b906107d39133610a11565b600190565b906107d39133610ae5565b919060018060a01b03831660005260016020526108043360406000206107b1565b549260001984141561081b575b6107d39350610a11565b82841061083757610832836107d395033383610ae5565b610811565b5050505050606460405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b50634e487b7160e01b600052601160045260246000fd5b811981116108a3570190565b6108ab610880565b0190565b6108d36107d3923360005260016020526108cd8360406000206107b1565b54610897565b9033610ae5565b3360005260016020526108f18160406000206107b1565b5491808310610906576107d392039033610ae5565b50505050608460405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b1561096357565b5060405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b156109bc57565b5060405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b916001600160a01b038084169290918315610a8d57610a728260008051602061160283398151915294610a88941696610a4b88151561095c565b610a6c84610a5883610797565b54610a65828210156109b5565b0391610797565b55610797565b8054820190556040519081529081906020820190565b0390a3565b505050505050608460405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152fd5b6001600160a01b038082169291908315610b9a578216938415610b455780610b347f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259461017d610a889561077d565b556040519081529081906020820190565b505050505050608460405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152fd5b505050505050608460405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152fd5b818110610bfb570390565b610c03610880565b0390565b8060001904821181151516610c1a570290565b610c22610880565b0290565b8115610c30570490565b505050634e487b7160e01b600052601260045260246000fd5b15610c5057565b5060405162461bcd60e51b81526020600482015260196024820152781a5b9cdd59999a58da595b9d081d1bdad95b88185b5bdd5b9d603a1b6044820152606490fd5b90816020910312610cab5751801515811415610cab5790565b5050600080fd5b6001600160a01b03918216815291166020820152604081019190915260600190565b506040513d6000823e3d90fd5b610ce96110d6565b610d71576020610d2a600092610d0b610d06610d06600554610771565b610771565b906040519485809481936323b872dd60e01b8352303360048501610cb2565b03925af18015610d64575b610d46575b50476104f28133610e07565b610d5d90610d543d8261058d565b3d810190610c92565b5038610d3a565b610d6c610cd4565b610d35565b610ddb9060006020610dbe610d863447610bf0565b93610dad610da486610d9f610d996110d6565b34610c07565b610c26565b80921015610c49565b610d0b610d06610d06600554610771565b03925af18015610dfa575b610de5575b50610d9f60025434610c07565b6104f28133610e07565b610df390610d543d8261058d565b5038610dce565b610e02610cd4565b610dc9565b6001600160a01b038116918215610e5357602081610e44600094610e3c60008051602061160283398151915295600254610897565b600255610797565b818154019055604051908152a3565b50505050606460405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b15610ea257565b5060405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b6044820152606490fd5b6001600160a01b039091168152602081019190915260400190565b90610f00821515610e9b565b610f0a8247610c07565b610f36610f2f610f1d6002548094610c26565b92610d9f86610f2a6110d6565b610c07565b9333610fce565b8060008115610fc5575b600080809381933390f115610fb8575b610f61610d06610d06600554610771565b6020604051809263a9059cbb60e01b825281600081610f848a3360048401610ed9565b03925af18015610fab575b610f9857509190565b610fa690610d543d8261058d565b509190565b610fb3610cd4565b610f8f565b610fc0610cd4565b610f50565b506108fc610f40565b6001600160a01b03811690811561108457610fe881610797565b54838110611030578360008051602061160283398151915292611012600096610a88940391610797565b556110208160025403600255565b6040519081529081906020820190565b5050505050608460405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152fd5b50505050608460405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152fd5b6005546040516370a0823160e01b815230600482015290602090829060249082906001600160a01b03165afa908115611137575b600091611115575090565b906111203d8361058d565b6020823d8101031261113157505190565b91505080fd5b61113f610cd4565b61110a565b801561115e576104f2906111566110d6565b904790611550565b505060405162461bcd60e51b8152602060048201526014602482015273195d1a14dbdb19081a5cc81d1bdbc81cdb585b1b60621b6044820152606490fd5b80156111b5576104f2906111ae6110d6565b4791611550565b505060405162461bcd60e51b81526020600482015260166024820152751d1bdad95b94dbdb19081a5cc81d1bdbc81cdb585b1b60521b6044820152606490fd5b156111fc57565b5060405162461bcd60e51b815260206004820152601a6024820152791a5b9cdd59999a58da595b9d081bdd5d1c1d5d08185b5bdd5b9d60321b6044820152606490fd5b6020906112999261126f6112666112546110d6565b473481106112c9575b34900334611550565b928310156111f5565b60018060a01b036005541690600060405180968195829463a9059cbb60e01b845260048401610ed9565b03925af180156112bc575b6112ab5750565b6112b990610d543d8261058d565b50565b6112c4610cd4565b6112a4565b6112d1610880565b61125d565b61061a90339061123f565b90611331916112fc6112666112f46110d6565b479084611550565b60055461131590610d06906001600160a01b0316610771565b604051809481936323b872dd60e01b8352303360048501610cb2565b0392826020600096879687968780975af18015611387575b611372575b50818115611369575b3390f11561136157565b61061a610cd4565b506108fc611357565b61138090610d543d8261058d565b503861134e565b61138f610cd4565b611349565b90816020910312610cab57516104f281610479565b156113b057565b5060405162461bcd60e51b8152602060048201526018602482015277696e76616c69642065786368616e6765206164647265737360401b6044820152606490fd5b91906114246020611409610d06610d06600654610771565b93604051809381926303795fb160e11b83526004830161051f565b0381600080975af1908115611543575b8391611525575b506001600160a01b031690308214158061151c575b611459906113a9565b82602061148461147261146a6110d6565b479089611550565b96610d0b610d06610d06600554610771565b03925af1801561150f575b6114fa575b50813b156114f25760405162e2766960e61b8152600481019190915233602482015292839160449183915af180156114e5575b6114ce5750565b61061a906114dc3d8261058d565b3d810190610417565b6114ed610cd4565b6114c7565b505091505080fd5b61150890610d543d8261058d565b5038611494565b611517610cd4565b61148f565b50811515611450565b61153d91506115343d8261058d565b3d810190611394565b3861143b565b61154b610cd4565b611434565b90801515928380946115f8575b156115bc576064826104f29561159c9461158c606360001998808a048211811515166115af575b029586610c07565b96048311166115a2575b02610897565b90610c26565b6115aa610880565b611596565b6115b7610880565b611584565b5050505050606460405162461bcd60e51b815260206004820152601060248201526f696e76616c696420726573657276657360801b6044820152fd5b5080151561155d56feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa3646970667358221220722e4eb7880962dad488535ef258317156eee24a03c713b704d73050cc65e6276c6578706572696d656e74616cf564736f6c634300080c0041a36469706673582212206f6d27b6fd613aca7fccfaa3e5f5457f8a5793cb96c6590e3345368449707c406c6578706572696d656e74616cf564736f6c634300080c0041",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1619,
        "contract": "contracts/ExchangeFactory.sol:ExchangeFactory",
        "label": "tokenToExchange",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}