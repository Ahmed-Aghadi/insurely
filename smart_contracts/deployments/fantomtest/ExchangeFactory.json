{
  "address": "0xdD72122b6D1fbbeF596D9acCe22Bb176210Ac0f7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "createExchange",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "getExchange",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenToExchange",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf826766baac64658ad02cbb59e18acce059ba4f568eecfa1d3d095109f436322",
  "receipt": {
    "to": null,
    "from": "0x0de82DCC40B8468639251b089f8b4A4400022e04",
    "contractAddress": "0xdD72122b6D1fbbeF596D9acCe22Bb176210Ac0f7",
    "transactionIndex": 0,
    "gasUsed": "1570985",
    "logsBloom": "0x
    "blockHash": "0x0000471700000247e03dc1a75eb578a991139882e2e7bc5e5665dda7ac26263b",
    "transactionHash": "0xf826766baac64658ad02cbb59e18acce059ba4f568eecfa1d3d095109f436322",
    "logs": [],
    "blockNumber": 14323049,
    "cumulativeGasUsed": "1570985",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b646b9e57c1bd795730c54f4733dc422",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"createExchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getExchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenToExchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ExchangeFactory.sol\":\"ExchangeFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Exchange.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IExchange {\\n    function ethToTokenSwap(uint256 _minTokens) external payable;\\n\\n    function ethToTokenTransfer(uint256 _minTokens, address _recipient) external payable;\\n}\\n\\ninterface IExchangeFactory {\\n    function getExchange(address _tokenAddress) external returns (address);\\n}\\n\\ncontract Exchange is ERC20 {\\n    address public tokenAddress;\\n    address public factoryAddress;\\n\\n    constructor(address _token) ERC20(\\\"Swap\\\", \\\"SWAP\\\") {\\n        require(_token != address(0), \\\"invalid token address\\\");\\n\\n        tokenAddress = _token;\\n        factoryAddress = msg.sender;\\n    }\\n\\n    function addLiquidity(uint256 _tokenAmount) public payable returns (uint256) {\\n        if (getReserve() == 0) {\\n            IERC20 token = IERC20(tokenAddress);\\n            token.transferFrom(msg.sender, address(this), _tokenAmount);\\n\\n            uint256 liquidity = address(this).balance;\\n            _mint(msg.sender, liquidity);\\n\\n            return liquidity;\\n        } else {\\n            uint256 ethReserve = address(this).balance - msg.value;\\n            uint256 tokenReserve = getReserve();\\n            uint256 tokenAmount = (msg.value * tokenReserve) / ethReserve;\\n            require(_tokenAmount >= tokenAmount, \\\"insufficient token amount\\\");\\n\\n            IERC20 token = IERC20(tokenAddress);\\n            token.transferFrom(msg.sender, address(this), tokenAmount);\\n\\n            uint256 liquidity = (msg.value * totalSupply()) / ethReserve;\\n            _mint(msg.sender, liquidity);\\n\\n            return liquidity;\\n        }\\n    }\\n\\n    function removeLiquidity(uint256 _amount) public returns (uint256, uint256) {\\n        require(_amount > 0, \\\"invalid amount\\\");\\n\\n        uint256 ethAmount = (address(this).balance * _amount) / totalSupply();\\n        uint256 tokenAmount = (getReserve() * _amount) / totalSupply();\\n\\n        _burn(msg.sender, _amount);\\n        payable(msg.sender).transfer(ethAmount);\\n        IERC20(tokenAddress).transfer(msg.sender, tokenAmount);\\n\\n        return (ethAmount, tokenAmount);\\n    }\\n\\n    function getReserve() public view returns (uint256) {\\n        return IERC20(tokenAddress).balanceOf(address(this));\\n    }\\n\\n    function getTokenAmount(uint256 _ethSold) public view returns (uint256) {\\n        require(_ethSold > 0, \\\"ethSold is too small\\\");\\n\\n        uint256 tokenReserve = getReserve();\\n\\n        return getAmount(_ethSold, address(this).balance, tokenReserve);\\n    }\\n\\n    function getEthAmount(uint256 _tokenSold) public view returns (uint256) {\\n        require(_tokenSold > 0, \\\"tokenSold is too small\\\");\\n\\n        uint256 tokenReserve = getReserve();\\n\\n        return getAmount(_tokenSold, tokenReserve, address(this).balance);\\n    }\\n\\n    function ethToToken(uint256 _minTokens, address recipient) private {\\n        uint256 tokenReserve = getReserve();\\n        uint256 tokensBought = getAmount(\\n            msg.value,\\n            address(this).balance - msg.value,\\n            tokenReserve\\n        );\\n\\n        require(tokensBought >= _minTokens, \\\"insufficient output amount\\\");\\n\\n        IERC20(tokenAddress).transfer(recipient, tokensBought);\\n    }\\n\\n    function ethToTokenTransfer(uint256 _minTokens, address _recipient) public payable {\\n        ethToToken(_minTokens, _recipient);\\n    }\\n\\n    function ethToTokenSwap(uint256 _minTokens) public payable {\\n        ethToToken(_minTokens, msg.sender);\\n    }\\n\\n    function tokenToEthSwap(uint256 _tokensSold, uint256 _minEth) public {\\n        uint256 tokenReserve = getReserve();\\n        uint256 ethBought = getAmount(_tokensSold, tokenReserve, address(this).balance);\\n\\n        require(ethBought >= _minEth, \\\"insufficient output amount\\\");\\n\\n        IERC20(tokenAddress).transferFrom(msg.sender, address(this), _tokensSold);\\n        payable(msg.sender).transfer(ethBought);\\n    }\\n\\n    function tokenToTokenSwap(\\n        uint256 _tokensSold,\\n        uint256 _minTokensBought,\\n        address _tokenAddress\\n    ) public {\\n        address exchangeAddress = IExchangeFactory(factoryAddress).getExchange(_tokenAddress);\\n        require(\\n            exchangeAddress != address(this) && exchangeAddress != address(0),\\n            \\\"invalid exchange address\\\"\\n        );\\n\\n        uint256 tokenReserve = getReserve();\\n        uint256 ethBought = getAmount(_tokensSold, tokenReserve, address(this).balance);\\n\\n        IERC20(tokenAddress).transferFrom(msg.sender, address(this), _tokensSold);\\n\\n        IExchange(exchangeAddress).ethToTokenTransfer{value: ethBought}(\\n            _minTokensBought,\\n            msg.sender\\n        );\\n    }\\n\\n    function getAmount(\\n        uint256 inputAmount,\\n        uint256 inputReserve,\\n        uint256 outputReserve\\n    ) private pure returns (uint256) {\\n        require(inputReserve > 0 && outputReserve > 0, \\\"invalid reserves\\\");\\n\\n        uint256 inputAmountWithFee = inputAmount * 99;\\n        uint256 numerator = inputAmountWithFee * outputReserve;\\n        uint256 denominator = (inputReserve * 100) + inputAmountWithFee;\\n\\n        return numerator / denominator;\\n    }\\n}\\n\",\"keccak256\":\"0x19ccbff17213013744174e9acad741bba7d362c0f584a05af50f7e4e87f0de4e\",\"license\":\"Unlicense\"},\"contracts/ExchangeFactory.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Exchange.sol\\\";\\n\\ncontract ExchangeFactory {\\n    mapping(address => address) public tokenToExchange;\\n\\n    function createExchange(address _tokenAddress) public returns (address) {\\n        require(_tokenAddress != address(0), \\\"invalid token address\\\");\\n        require(tokenToExchange[_tokenAddress] == address(0), \\\"exchange already exists\\\");\\n\\n        Exchange exchange = new Exchange(_tokenAddress);\\n        tokenToExchange[_tokenAddress] = address(exchange);\\n\\n        return address(exchange);\\n    }\\n\\n    function getExchange(address _tokenAddress) public view returns (address) {\\n        return tokenToExchange[_tokenAddress];\\n    }\\n}\\n\",\"keccak256\":\"0xbdd872ab4da09cec8995bdc41441bde47c02b430ef1d4ba579ee7267d6473b5f\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611b78806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806306f2bf62146100465780631648f38e14610088578063c3c49a631461009b575b600080fd5b6100726100543660046101f4565b6001600160a01b039081166000908152602081905260409020541690565b60405161007f9190610224565b60405180910390f35b6100726100963660046101f4565b6100c4565b6100726100a93660046101f4565b6000602081905290815260409020546001600160a01b031681565b60006001600160a01b0382166101195760405162461bcd60e51b8152602060048201526015602482015274696e76616c696420746f6b656e206164647265737360581b60448201526064015b60405180910390fd5b6001600160a01b03828116600090815260208190526040902054161561017b5760405162461bcd60e51b815260206004820152601760248201527665786368616e676520616c72656164792065786973747360481b6044820152606401610110565b60008260405161018a906101e7565b6101949190610224565b604051809103906000f0801580156101b0573d6000803e3d6000fd5b506001600160a01b03938416600090815260208190526040902080546001600160a01b031916948216949094179093555090919050565b61190a8061023983390190565b60006020828403121561020657600080fd5b81356001600160a01b038116811461021d57600080fd5b9392505050565b6001600160a01b039190911681526020019056fe60806040523480156200001157600080fd5b506040516200190a3803806200190a8339810160408190526200003491620001cf565b604051806040016040528060048152602001630537761760e41b815250604051806040016040528060048152602001630535741560e41b81525081600390805190602001906200008692919062000129565b5080516200009c90600490602084019062000129565b5050506001600160a01b038116620000fa5760405162461bcd60e51b815260206004820152601560248201527f696e76616c696420746f6b656e20616464726573730000000000000000000000604482015260640160405180910390fd5b600580546001600160a01b039092166001600160a01b031992831617905560068054909116331790556200023e565b828054620001379062000201565b90600052602060002090601f0160209004810192826200015b5760008555620001a6565b82601f106200017657805160ff1916838001178555620001a6565b82800160010185558215620001a6579182015b82811115620001a657825182559160200191906001019062000189565b50620001b4929150620001b8565b5090565b5b80821115620001b45760008155600101620001b9565b600060208284031215620001e257600080fd5b81516001600160a01b0381168114620001fa57600080fd5b9392505050565b600181811c908216806200021657607f821691505b602082108114156200023857634e487b7160e01b600052602260045260246000fd5b50919050565b6116bc806200024e6000396000f3fe6080604052600436106101055760003560e01c806306fdde031461010a578063095ea7b31461013557806318160ddd1461016557806323b872dd14610184578063313ce567146101a4578063389d9a40146101c057806339509351146101d557806351c6590a146101f557806359bf5d391461020857806370a082311461021d5780638fc7a25d1461025357806395d89b4114610273578063966dae0e146102885780639c8f9f23146102b55780639d76ea58146102ea578063a457c2d71461030a578063a9059cbb1461032a578063c2507ac11461034a578063dd62ed3e1461036a578063e0486c8a1461038a578063f7a7e324146103aa578063f979dcd7146103ca575b600080fd5b34801561011657600080fd5b5061011f6103dd565b60405161012c9190611302565b60405180910390f35b34801561014157600080fd5b5061015561015036600461136c565b61046f565b604051901515815260200161012c565b34801561017157600080fd5b506002545b60405190815260200161012c565b34801561019057600080fd5b5061015561019f366004611398565b610487565b3480156101b057600080fd5b506040516012815260200161012c565b6101d36101ce3660046113d9565b6104ab565b005b3480156101e157600080fd5b506101556101f036600461136c565b6104b9565b610176610203366004611409565b6104db565b34801561021457600080fd5b506101766106a9565b34801561022957600080fd5b50610176610238366004611422565b6001600160a01b031660009081526020819052604090205490565b34801561025f57600080fd5b5061017661026e366004611409565b610720565b34801561027f57600080fd5b5061011f610781565b34801561029457600080fd5b506006546102a8906001600160a01b031681565b60405161012c919061143f565b3480156102c157600080fd5b506102d56102d0366004611409565b610790565b6040805192835260208301919091520161012c565b3480156102f657600080fd5b506005546102a8906001600160a01b031681565b34801561031657600080fd5b5061015561032536600461136c565b6108d7565b34801561033657600080fd5b5061015561034536600461136c565b610952565b34801561035657600080fd5b50610176610365366004611409565b610960565b34801561037657600080fd5b50610176610385366004611453565b6109bf565b34801561039657600080fd5b506101d36103a5366004611481565b6109ea565b3480156103b657600080fd5b506101d36103c53660046114a3565b610ad1565b6101d36103d8366004611409565b610caa565b6060600380546103ec906114dc565b80601f0160208091040260200160405190810160405280929190818152602001828054610418906114dc565b80156104655780601f1061043a57610100808354040283529160200191610465565b820191906000526020600020905b81548152906001019060200180831161044857829003601f168201915b5050505050905090565b60003361047d818585610cb7565b5060019392505050565b600033610495858285610ddc565b6104a0858585610e56565b506001949350505050565b6104b58282610fe8565b5050565b60003361047d8185856104cc83836109bf565b6104d6919061152d565b610cb7565b60006104e56106a9565b610575576005546040516323b872dd60e01b81526001600160a01b039091169081906323b872dd9061051f90339030908890600401611545565b6020604051808303816000875af115801561053e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105629190611569565b504761056e33826110a1565b9392505050565b6000610581344761158b565b9050600061058d6106a9565b905060008261059c83346115a2565b6105a691906115c1565b9050808510156105f95760405162461bcd60e51b81526020600482015260196024820152781a5b9cdd59999a58da595b9d081d1bdad95b88185b5bdd5b9d603a1b60448201526064015b60405180910390fd5b6005546040516323b872dd60e01b81526001600160a01b039091169081906323b872dd9061062f90339030908790600401611545565b6020604051808303816000875af115801561064e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106729190611569565b5060008461067f60025490565b61068990346115a2565b61069391906115c1565b905061069f33826110a1565b9695505050505050565b6005546040516370a0823160e01b81526000916001600160a01b0316906370a08231906106da90309060040161143f565b602060405180830381865afa1580156106f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071b91906115e3565b905090565b600080821161076a5760405162461bcd60e51b81526020600482015260166024820152751d1bdad95b94dbdb19081a5cc81d1bdbc81cdb585b1b60521b60448201526064016105f0565b60006107746106a9565b905061056e83824761114e565b6060600480546103ec906114dc565b600080600083116107d45760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b60448201526064016105f0565b60006107df60025490565b6107e985476115a2565b6107f391906115c1565b9050600061080060025490565b856108096106a9565b61081391906115a2565b61081d91906115c1565b905061082933866111ea565b604051339083156108fc029084906000818181858888f19350505050158015610856573d6000803e3d6000fd5b5060055460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061088990339085906004016115fc565b6020604051808303816000875af11580156108a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cc9190611569565b509094909350915050565b600033816108e582866109bf565b9050838110156109455760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016105f0565b6104a08286868403610cb7565b60003361047d818585610e56565b60008082116109a85760405162461bcd60e51b8152602060048201526014602482015273195d1a14dbdb19081a5cc81d1bdbc81cdb585b1b60621b60448201526064016105f0565b60006109b26106a9565b905061056e83478361114e565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60006109f46106a9565b90506000610a0384834761114e565b905082811015610a255760405162461bcd60e51b81526004016105f090611615565b6005546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610a5990339030908990600401611545565b6020604051808303816000875af1158015610a78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9c9190611569565b50604051339082156108fc029083906000818181858888f19350505050158015610aca573d6000803e3d6000fd5b5050505050565b6006546040516303795fb160e11b81526000916001600160a01b0316906306f2bf6290610b0290859060040161143f565b6020604051808303816000875af1158015610b21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b459190611649565b90506001600160a01b0381163014801590610b6857506001600160a01b03811615155b610baf5760405162461bcd60e51b8152602060048201526018602482015277696e76616c69642065786368616e6765206164647265737360401b60448201526064016105f0565b6000610bb96106a9565b90506000610bc886834761114e565b6005546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd90610bfd90339030908b90600401611545565b6020604051808303816000875af1158015610c1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c409190611569565b5060405162e2766960e61b8152600481018690523360248201526001600160a01b0384169063389d9a409083906044016000604051808303818588803b158015610c8957600080fd5b505af1158015610c9d573d6000803e3d6000fd5b5050505050505050505050565b610cb48133610fe8565b50565b6001600160a01b038316610d195760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016105f0565b6001600160a01b038216610d7a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016105f0565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000610de884846109bf565b90506000198114610e505781811015610e435760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016105f0565b610e508484848403610cb7565b50505050565b6001600160a01b038316610eba5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016105f0565b6001600160a01b038216610f1c5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016105f0565b6001600160a01b03831660009081526020819052604090205481811015610f945760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016105f0565b6001600160a01b0384811660008181526020818152604080832087870390559387168083529184902080548701905592518581529092600080516020611667833981519152910160405180910390a3610e50565b6000610ff26106a9565b9050600061100a34611004814761158b565b8461114e565b90508381101561102c5760405162461bcd60e51b81526004016105f090611615565b60055460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061105e90869085906004016115fc565b6020604051808303816000875af115801561107d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aca9190611569565b6001600160a01b0382166110f75760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016105f0565b8060026000828254611109919061152d565b90915550506001600160a01b03821660008181526020818152604080832080548601905551848152600080516020611667833981519152910160405180910390a35050565b6000808311801561115f5750600082115b61119e5760405162461bcd60e51b815260206004820152601060248201526f696e76616c696420726573657276657360801b60448201526064016105f0565b60006111ab8560636115a2565b905060006111b984836115a2565b90506000826111c98760646115a2565b6111d3919061152d565b90506111df81836115c1565b979650505050505050565b6001600160a01b03821661124a5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016105f0565b6001600160a01b038216600090815260208190526040902054818110156112be5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016105f0565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192916000805160206116678339815191529101610dcf565b600060208083528351808285015260005b8181101561132f57858101830151858201604001528201611313565b81811115611341576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b0381168114610cb457600080fd5b6000806040838503121561137f57600080fd5b823561138a81611357565b946020939093013593505050565b6000806000606084860312156113ad57600080fd5b83356113b881611357565b925060208401356113c881611357565b929592945050506040919091013590565b600080604083850312156113ec57600080fd5b8235915060208301356113fe81611357565b809150509250929050565b60006020828403121561141b57600080fd5b5035919050565b60006020828403121561143457600080fd5b813561056e81611357565b6001600160a01b0391909116815260200190565b6000806040838503121561146657600080fd5b823561147181611357565b915060208301356113fe81611357565b6000806040838503121561149457600080fd5b50508035926020909101359150565b6000806000606084860312156114b857600080fd5b833592506020840135915060408401356114d181611357565b809150509250925092565b600181811c908216806114f057607f821691505b6020821081141561151157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561154057611540611517565b500190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561157b57600080fd5b8151801515811461056e57600080fd5b60008282101561159d5761159d611517565b500390565b60008160001904831182151516156115bc576115bc611517565b500290565b6000826115de57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156115f557600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b6020808252601a90820152791a5b9cdd59999a58da595b9d081bdd5d1c1d5d08185b5bdd5b9d60321b604082015260600190565b60006020828403121561165b57600080fd5b815161056e8161135756feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212204948f19059781cc6602d9c8176be6efbe9e510f71374438cb26c031d94f4f7a564736f6c634300080c0033a264697066735822122002e2719191e6fb28c351f0c7769d53528a46cd51cf0bdbe647731473dfa00eff64736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806306f2bf62146100465780631648f38e14610088578063c3c49a631461009b575b600080fd5b6100726100543660046101f4565b6001600160a01b039081166000908152602081905260409020541690565b60405161007f9190610224565b60405180910390f35b6100726100963660046101f4565b6100c4565b6100726100a93660046101f4565b6000602081905290815260409020546001600160a01b031681565b60006001600160a01b0382166101195760405162461bcd60e51b8152602060048201526015602482015274696e76616c696420746f6b656e206164647265737360581b60448201526064015b60405180910390fd5b6001600160a01b03828116600090815260208190526040902054161561017b5760405162461bcd60e51b815260206004820152601760248201527665786368616e676520616c72656164792065786973747360481b6044820152606401610110565b60008260405161018a906101e7565b6101949190610224565b604051809103906000f0801580156101b0573d6000803e3d6000fd5b506001600160a01b03938416600090815260208190526040902080546001600160a01b031916948216949094179093555090919050565b61190a8061023983390190565b60006020828403121561020657600080fd5b81356001600160a01b038116811461021d57600080fd5b9392505050565b6001600160a01b039190911681526020019056fe60806040523480156200001157600080fd5b506040516200190a3803806200190a8339810160408190526200003491620001cf565b604051806040016040528060048152602001630537761760e41b815250604051806040016040528060048152602001630535741560e41b81525081600390805190602001906200008692919062000129565b5080516200009c90600490602084019062000129565b5050506001600160a01b038116620000fa5760405162461bcd60e51b815260206004820152601560248201527f696e76616c696420746f6b656e20616464726573730000000000000000000000604482015260640160405180910390fd5b600580546001600160a01b039092166001600160a01b031992831617905560068054909116331790556200023e565b828054620001379062000201565b90600052602060002090601f0160209004810192826200015b5760008555620001a6565b82601f106200017657805160ff1916838001178555620001a6565b82800160010185558215620001a6579182015b82811115620001a657825182559160200191906001019062000189565b50620001b4929150620001b8565b5090565b5b80821115620001b45760008155600101620001b9565b600060208284031215620001e257600080fd5b81516001600160a01b0381168114620001fa57600080fd5b9392505050565b600181811c908216806200021657607f821691505b602082108114156200023857634e487b7160e01b600052602260045260246000fd5b50919050565b6116bc806200024e6000396000f3fe6080604052600436106101055760003560e01c806306fdde031461010a578063095ea7b31461013557806318160ddd1461016557806323b872dd14610184578063313ce567146101a4578063389d9a40146101c057806339509351146101d557806351c6590a146101f557806359bf5d391461020857806370a082311461021d5780638fc7a25d1461025357806395d89b4114610273578063966dae0e146102885780639c8f9f23146102b55780639d76ea58146102ea578063a457c2d71461030a578063a9059cbb1461032a578063c2507ac11461034a578063dd62ed3e1461036a578063e0486c8a1461038a578063f7a7e324146103aa578063f979dcd7146103ca575b600080fd5b34801561011657600080fd5b5061011f6103dd565b60405161012c9190611302565b60405180910390f35b34801561014157600080fd5b5061015561015036600461136c565b61046f565b604051901515815260200161012c565b34801561017157600080fd5b506002545b60405190815260200161012c565b34801561019057600080fd5b5061015561019f366004611398565b610487565b3480156101b057600080fd5b506040516012815260200161012c565b6101d36101ce3660046113d9565b6104ab565b005b3480156101e157600080fd5b506101556101f036600461136c565b6104b9565b610176610203366004611409565b6104db565b34801561021457600080fd5b506101766106a9565b34801561022957600080fd5b50610176610238366004611422565b6001600160a01b031660009081526020819052604090205490565b34801561025f57600080fd5b5061017661026e366004611409565b610720565b34801561027f57600080fd5b5061011f610781565b34801561029457600080fd5b506006546102a8906001600160a01b031681565b60405161012c919061143f565b3480156102c157600080fd5b506102d56102d0366004611409565b610790565b6040805192835260208301919091520161012c565b3480156102f657600080fd5b506005546102a8906001600160a01b031681565b34801561031657600080fd5b5061015561032536600461136c565b6108d7565b34801561033657600080fd5b5061015561034536600461136c565b610952565b34801561035657600080fd5b50610176610365366004611409565b610960565b34801561037657600080fd5b50610176610385366004611453565b6109bf565b34801561039657600080fd5b506101d36103a5366004611481565b6109ea565b3480156103b657600080fd5b506101d36103c53660046114a3565b610ad1565b6101d36103d8366004611409565b610caa565b6060600380546103ec906114dc565b80601f0160208091040260200160405190810160405280929190818152602001828054610418906114dc565b80156104655780601f1061043a57610100808354040283529160200191610465565b820191906000526020600020905b81548152906001019060200180831161044857829003601f168201915b5050505050905090565b60003361047d818585610cb7565b5060019392505050565b600033610495858285610ddc565b6104a0858585610e56565b506001949350505050565b6104b58282610fe8565b5050565b60003361047d8185856104cc83836109bf565b6104d6919061152d565b610cb7565b60006104e56106a9565b610575576005546040516323b872dd60e01b81526001600160a01b039091169081906323b872dd9061051f90339030908890600401611545565b6020604051808303816000875af115801561053e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105629190611569565b504761056e33826110a1565b9392505050565b6000610581344761158b565b9050600061058d6106a9565b905060008261059c83346115a2565b6105a691906115c1565b9050808510156105f95760405162461bcd60e51b81526020600482015260196024820152781a5b9cdd59999a58da595b9d081d1bdad95b88185b5bdd5b9d603a1b60448201526064015b60405180910390fd5b6005546040516323b872dd60e01b81526001600160a01b039091169081906323b872dd9061062f90339030908790600401611545565b6020604051808303816000875af115801561064e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106729190611569565b5060008461067f60025490565b61068990346115a2565b61069391906115c1565b905061069f33826110a1565b9695505050505050565b6005546040516370a0823160e01b81526000916001600160a01b0316906370a08231906106da90309060040161143f565b602060405180830381865afa1580156106f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071b91906115e3565b905090565b600080821161076a5760405162461bcd60e51b81526020600482015260166024820152751d1bdad95b94dbdb19081a5cc81d1bdbc81cdb585b1b60521b60448201526064016105f0565b60006107746106a9565b905061056e83824761114e565b6060600480546103ec906114dc565b600080600083116107d45760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b60448201526064016105f0565b60006107df60025490565b6107e985476115a2565b6107f391906115c1565b9050600061080060025490565b856108096106a9565b61081391906115a2565b61081d91906115c1565b905061082933866111ea565b604051339083156108fc029084906000818181858888f19350505050158015610856573d6000803e3d6000fd5b5060055460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061088990339085906004016115fc565b6020604051808303816000875af11580156108a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cc9190611569565b509094909350915050565b600033816108e582866109bf565b9050838110156109455760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016105f0565b6104a08286868403610cb7565b60003361047d818585610e56565b60008082116109a85760405162461bcd60e51b8152602060048201526014602482015273195d1a14dbdb19081a5cc81d1bdbc81cdb585b1b60621b60448201526064016105f0565b60006109b26106a9565b905061056e83478361114e565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60006109f46106a9565b90506000610a0384834761114e565b905082811015610a255760405162461bcd60e51b81526004016105f090611615565b6005546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610a5990339030908990600401611545565b6020604051808303816000875af1158015610a78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9c9190611569565b50604051339082156108fc029083906000818181858888f19350505050158015610aca573d6000803e3d6000fd5b5050505050565b6006546040516303795fb160e11b81526000916001600160a01b0316906306f2bf6290610b0290859060040161143f565b6020604051808303816000875af1158015610b21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b459190611649565b90506001600160a01b0381163014801590610b6857506001600160a01b03811615155b610baf5760405162461bcd60e51b8152602060048201526018602482015277696e76616c69642065786368616e6765206164647265737360401b60448201526064016105f0565b6000610bb96106a9565b90506000610bc886834761114e565b6005546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd90610bfd90339030908b90600401611545565b6020604051808303816000875af1158015610c1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c409190611569565b5060405162e2766960e61b8152600481018690523360248201526001600160a01b0384169063389d9a409083906044016000604051808303818588803b158015610c8957600080fd5b505af1158015610c9d573d6000803e3d6000fd5b5050505050505050505050565b610cb48133610fe8565b50565b6001600160a01b038316610d195760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016105f0565b6001600160a01b038216610d7a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016105f0565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000610de884846109bf565b90506000198114610e505781811015610e435760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016105f0565b610e508484848403610cb7565b50505050565b6001600160a01b038316610eba5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016105f0565b6001600160a01b038216610f1c5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016105f0565b6001600160a01b03831660009081526020819052604090205481811015610f945760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016105f0565b6001600160a01b0384811660008181526020818152604080832087870390559387168083529184902080548701905592518581529092600080516020611667833981519152910160405180910390a3610e50565b6000610ff26106a9565b9050600061100a34611004814761158b565b8461114e565b90508381101561102c5760405162461bcd60e51b81526004016105f090611615565b60055460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061105e90869085906004016115fc565b6020604051808303816000875af115801561107d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aca9190611569565b6001600160a01b0382166110f75760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016105f0565b8060026000828254611109919061152d565b90915550506001600160a01b03821660008181526020818152604080832080548601905551848152600080516020611667833981519152910160405180910390a35050565b6000808311801561115f5750600082115b61119e5760405162461bcd60e51b815260206004820152601060248201526f696e76616c696420726573657276657360801b60448201526064016105f0565b60006111ab8560636115a2565b905060006111b984836115a2565b90506000826111c98760646115a2565b6111d3919061152d565b90506111df81836115c1565b979650505050505050565b6001600160a01b03821661124a5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016105f0565b6001600160a01b038216600090815260208190526040902054818110156112be5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016105f0565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192916000805160206116678339815191529101610dcf565b600060208083528351808285015260005b8181101561132f57858101830151858201604001528201611313565b81811115611341576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b0381168114610cb457600080fd5b6000806040838503121561137f57600080fd5b823561138a81611357565b946020939093013593505050565b6000806000606084860312156113ad57600080fd5b83356113b881611357565b925060208401356113c881611357565b929592945050506040919091013590565b600080604083850312156113ec57600080fd5b8235915060208301356113fe81611357565b809150509250929050565b60006020828403121561141b57600080fd5b5035919050565b60006020828403121561143457600080fd5b813561056e81611357565b6001600160a01b0391909116815260200190565b6000806040838503121561146657600080fd5b823561147181611357565b915060208301356113fe81611357565b6000806040838503121561149457600080fd5b50508035926020909101359150565b6000806000606084860312156114b857600080fd5b833592506020840135915060408401356114d181611357565b809150509250925092565b600181811c908216806114f057607f821691505b6020821081141561151157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561154057611540611517565b500190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561157b57600080fd5b8151801515811461056e57600080fd5b60008282101561159d5761159d611517565b500390565b60008160001904831182151516156115bc576115bc611517565b500290565b6000826115de57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156115f557600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b6020808252601a90820152791a5b9cdd59999a58da595b9d081bdd5d1c1d5d08185b5bdd5b9d60321b604082015260600190565b60006020828403121561165b57600080fd5b815161056e8161135756feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212204948f19059781cc6602d9c8176be6efbe9e510f71374438cb26c031d94f4f7a564736f6c634300080c0033a264697066735822122002e2719191e6fb28c351f0c7769d53528a46cd51cf0bdbe647731473dfa00eff64736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1619,
        "contract": "contracts/ExchangeFactory.sol:ExchangeFactory",
        "label": "tokenToExchange",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}