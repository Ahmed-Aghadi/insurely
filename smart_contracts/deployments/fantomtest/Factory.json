{
  "address": "0xE9cEAe69B724F4340Ca3D6D2F0D147b0Bc3E1978",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "exchangeFactoryAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseUri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "minMembers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requestTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "judgingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "judgesLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "percentDivideIntoJudges",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "useLiquidityPool",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "liquidityTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidityTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "groupId",
          "type": "string"
        }
      ],
      "name": "createInsurance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getContract",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "judgingStartTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "judgingEndTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct Factory.ContractInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContracts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "judgingStartTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "judgingEndTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct Factory.ContractInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "getRandomNumbers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4bf11d1022941129a4375ee6eac80616803c5a9592d6f7044fa1aaf87fed5423",
  "receipt": {
    "to": null,
    "from": "0x0de82DCC40B8468639251b089f8b4A4400022e04",
    "contractAddress": "0xE9cEAe69B724F4340Ca3D6D2F0D147b0Bc3E1978",
    "transactionIndex": 0,
    "gasUsed": "4507554",
    "logsBloom": "0x
    "blockHash": "0x000047240000119a9d142b7f45e56f4ec3e07620d3ece1655698250fd77c4e2d",
    "transactionHash": "0x4bf11d1022941129a4375ee6eac80616803c5a9592d6f7044fa1aaf87fed5423",
    "logs": [],
    "blockNumber": 14342195,
    "cumulativeGasUsed": "4507554",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbd13f08b8352a3635218ab9418e340c60d6eb418",
    "119",
    "0x121a143066e0f2f08b620784af77cccb35c6242460b4a8ee251b4b416abaebd4",
    "500000",
    "0x7Fc29F9cFAD302505B7Ece08eB94bd2f209bb6A3"
  ],
  "numDeployments": 1,
  "solcInputHash": "fcce8870c400fee294c11bae8163b4de",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"exchangeFactoryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minMembers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"judgingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"judgesLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentDivideIntoJudges\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useLiquidityPool\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"liquidityTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"groupId\",\"type\":\"string\"}],\"name\":\"createInsurance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getContract\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"judgingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"judgingEndTime\",\"type\":\"uint256\"}],\"internalType\":\"struct Factory.ContractInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContracts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"judgingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"judgingEndTime\",\"type\":\"uint256\"}],\"internalType\":\"struct Factory.ContractInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"getRandomNumbers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factory.sol\":\"Factory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"./Insurance.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\n\\ncontract Factory is AutomationCompatibleInterface, VRFConsumerBaseV2 {\\n    struct ContractInfo {\\n        address contractAddress;\\n        uint256 judgingStartTime;\\n        uint256 judgingEndTime;\\n    }\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    uint64 private immutable i_subscriptionId;\\n    bytes32 private immutable i_gasLane;\\n    uint32 private immutable i_callbackGasLimit;\\n\\n    address private immutable i_exchangeFactoryAddress;\\n\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    mapping(uint256 => address) private s_requestIdToContractAddress;\\n\\n    // address[] private s_insuranceContracts;\\n    ContractInfo[] private s_contractInfos;\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane, // keyH\\n        uint32 callbackGasLimit,\\n        address exchangeFactoryAddress // address of exchange factory contract\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        i_exchangeFactoryAddress = exchangeFactoryAddress;\\n    }\\n\\n    function createInsurance(\\n        string memory baseUri,\\n        uint256 minMembers,\\n        uint256 requestTime, // (in seconds) time before one can make a request\\n        uint256 validity, // (in seconds) insurance valid after startBefore seconds and user can claim insurance after validity\\n        uint256 claimTime, // (in seconds) time before use can make a insurance claim request, after this time judging will start.\\n        uint256 judgingTime, // (in seconds) time before judges should judge insurance claim requests.\\n        uint256 judgesLength, // number of judges\\n        uint256 amount, // amount everyone should put in the pool\\n        uint256 percentDivideIntoJudges, // percent of total pool amount that should be divided into judges (total pool amount = amount * members.length where members.length == s_memberNumber - 1) (only valid for judges who had judged every claim request)\\n        bool useLiquidityPool, // if true, the insurance contract will add funds to liquidity pool\\n        address liquidityTokenAddress, // address of liquidity token\\n        uint256 liquidityTokenAmount, // amount of liquidity token to add to liquidity pool\\n        string memory groupId\\n    ) public payable returns (address) {\\n        Insurance newInsurance = new Insurance(\\n            baseUri,\\n            minMembers,\\n            requestTime,\\n            validity,\\n            claimTime,\\n            judgingTime,\\n            judgesLength,\\n            amount,\\n            percentDivideIntoJudges,\\n            i_exchangeFactoryAddress,\\n            useLiquidityPool,\\n            liquidityTokenAddress,\\n            liquidityTokenAmount,\\n            groupId\\n        );\\n\\n        uint256 judgingStartTime = block.timestamp + requestTime + validity + claimTime;\\n\\n        // s_insuranceContracts.push(address(newInsurance));\\n        uint256 judgingEndTime = judgingStartTime + judgingTime;\\n\\n        s_contractInfos.push(ContractInfo(address(newInsurance), judgingStartTime, judgingEndTime));\\n        return address(newInsurance);\\n    }\\n\\n    // Assumes the subscription is funded sufficiently.\\n    function getRandomNumbers(address contractAddress) public payable returns (uint256 requestId) {\\n        requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        s_requestIdToContractAddress[requestId] = contractAddress;\\n    }\\n\\n    function performUpkeep(bytes calldata performData) external override {\\n        (uint256 index, uint256 which) = abi.decode(performData, (uint256, uint256));\\n        address contractAddress = s_contractInfos[index].contractAddress;\\n        if (which == 0) {\\n            s_contractInfos[index].judgingStartTime = 0;\\n            getRandomNumbers(contractAddress);\\n            return;\\n        }\\n        s_contractInfos[index].judgingEndTime = 0;\\n        Insurance(contractAddress).fullfillRequests();\\n    }\\n\\n    /**\\n     * @dev This is the function that Chainlink VRF node\\n     * calls.\\n     */\\n    function fulfillRandomWords(\\n        uint256 requestId /* requestId */,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        Insurance insurance = Insurance(s_requestIdToContractAddress[requestId]);\\n        insurance.selectJudges(randomWords[0]);\\n    }\\n\\n    function checkUpkeep(\\n        bytes calldata /* checkData */\\n    ) external view override returns (bool upkeepNeeded, bytes memory performData) {\\n        upkeepNeeded = false;\\n        for (uint256 i = 0; i < s_contractInfos.length; i++) {\\n            if (\\n                s_contractInfos[i].judgingStartTime != 0 &&\\n                s_contractInfos[i].judgingStartTime < block.timestamp &&\\n                s_contractInfos[i].judgingEndTime > block.timestamp\\n            ) {\\n                upkeepNeeded = true;\\n                performData = abi.encode(i, 0); // index, which (0 = getRandomNumbers for selecting judges, 1 = fullfillRequests for fullfilling insurance claim requests)\\n                break;\\n            }\\n            if (\\n                s_contractInfos[i].judgingEndTime != 0 &&\\n                s_contractInfos[i].judgingEndTime < block.timestamp\\n            ) {\\n                upkeepNeeded = true;\\n                performData = abi.encode(i, 1);\\n                break;\\n            }\\n        }\\n    }\\n\\n    function getContracts() public view returns (ContractInfo[] memory) {\\n        return s_contractInfos;\\n    }\\n\\n    function getContractsLength() public view returns (uint256) {\\n        return s_contractInfos.length;\\n    }\\n\\n    function getContract(uint256 index) public view returns (ContractInfo memory) {\\n        return s_contractInfos[index];\\n    }\\n\\n    // function getContractAddress(uint256 index) public view returns (address) {\\n    //     return s_contractInfos[index].contractAddress;\\n    // }\\n}\\n\",\"keccak256\":\"0x8d9ce19e50ee1f95ad4b205144ad06933e78db577e5728e0eda8d2c2897a1284\",\"license\":\"MIT\"},\"contracts/Insurance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IExchange {\\n    function addLiquidity(uint256 _tokenAmount) external payable returns (uint256);\\n\\n    function removeLiquidity(uint256 _amount) external returns (uint256, uint256);\\n}\\n\\ninterface IExchangeFactory {\\n    function getExchange(address _tokenAddress) external returns (address);\\n}\\n\\nerror WithdrawFailed();\\n\\n// rate of native token to liquidity token will be considered as rate at the time of removing liquidity from the exchange. So exchange will act as a price oracle.\\n\\ncontract Insurance is Ownable {\\n    struct MemberRequest {\\n        address memberAddress;\\n        string requestUri;\\n        uint256 accepted;\\n    }\\n\\n    struct InsuranceClaimRequest {\\n        address memberAddress;\\n        string requestUri;\\n        uint256 amount;\\n        uint256 accepted;\\n    }\\n\\n    // struct Acceptance {\\n    //     address memberAddress; // member address who will accept joining requests or judge address who will accept claims\\n    //     uint256 id;\\n    // }\\n\\n    struct Judgement {\\n        bool accepted;\\n        string reasonUri;\\n    }\\n\\n    struct ClaimAccepted {\\n        uint256 claimId;\\n        uint256 amount;\\n    }\\n\\n    struct JudgementJobFullfilled {\\n        uint256 judgeId;\\n        uint256 amount; // amount judge will get\\n    }\\n\\n    string private s_baseUri;\\n    uint256 private immutable i_minMembers;\\n    uint256 private immutable i_requestBefore;\\n    uint256 private immutable i_validity;\\n    uint256 private immutable i_judgingStartTime;\\n    uint256 private immutable i_judgingEndTime;\\n    uint256 private immutable i_judgesLength;\\n    uint256 private immutable i_amount;\\n    uint256 private immutable i_percentageDividedIntoJudges;\\n    address private immutable i_exchangeFactoryAddress;\\n    address private immutable i_exchangeAddress;\\n    bool private immutable i_useLiquidityPool;\\n    address private immutable i_liquidityTokenAddress;\\n    uint256 private immutable i_liquidityTokenAmount;\\n    string private s_groupId;\\n    bool private s_isMinMembersReachedCalculated; // also isJudges selected\\n    bool private s_isMinMembersReached;\\n    uint256 private s_totalClaimAmountRequested;\\n    uint256 private s_totalClaimAmountAccepted;\\n    bool private s_isFinalJudgementCalculated;\\n    // bool private s_isAnyClaimAccepted = s_claimAccepted.length > 0;\\n    // bool private s_isAnyJudgementFullfilledJob == s_judgesFullfilledJobs.length > 0;\\n    uint256 private s_memberNumber = 1; // total members exists + 1\\n    mapping(uint256 => address) private s_idToMemberAddress; // memberNumber (id) => s_memberAddresses\\n    mapping(address => uint256) private s_addressToMemberId; // memberAddress => memberNumber (id)\\n    uint256 private s_requestNumber = 1; // total requests exists + 1\\n    mapping(address => uint256) private s_addressToRequestId; // memberAddress => requestNumber (id)\\n    mapping(uint256 => MemberRequest) private s_idToMemberRequest; // request id number => request\\n    mapping(bytes => bool) private s_memberRequestAcceptances; // abi.encode(Acceptance) => member request accepted or not\\n    uint256 private s_claimNumber = 1; // total claims exists + 1\\n    mapping(address => uint256) s_addressToClaimId; // memberAddress => Insurance claimId\\n    mapping(uint256 => InsuranceClaimRequest) s_idToClaimRequest; // Insurance claimId => request\\n    mapping(address => uint256) s_addressToJudgeId; // memberAddress => Insurance claimId (even judge id starts from 1)\\n    mapping(uint256 => address) s_idToJudgeAddress; // Insurance claimId => memberAddress (even judge id starts from 1)\\n    mapping(bytes => Judgement) private s_judgements; // abi.encode(Acceptance) => accepted or not + reason\\n    mapping(address => uint256) private s_judged; // judge address => number of judgement\\n\\n    JudgementJobFullfilled[] private s_judgesFullfilledJobs; // judges who fullfilled their job that is judged everyone && obviously index starts from 0\\n    ClaimAccepted[] private s_claimAccepted; // claims which are accepted that more than half of judges has accepted && obviously index starts from 0\\n\\n    // here balance is in native token | refer withdraw function for more details\\n    mapping(address => uint256) private s_balance; // member address => balance (after claim accepted)\\n\\n    constructor(\\n        string memory baseUri,\\n        uint256 minMembers,\\n        uint256 requestTime, // (in seconds) time before one can make a request\\n        uint256 validity, // (in seconds) insurance valid after requestTime seconds and user can claim insurance after validity\\n        uint256 claimTime, // (in seconds) time before use can make a insurance claim request, after this time judging will start.\\n        uint256 judgingTime, // (in seconds) time before judges should judge insurance claim requests.\\n        uint256 judgesLength, // number of judges\\n        uint256 amount, // amount everyone should put in the pool\\n        uint256 percentDivideIntoJudges, // percent of total pool amount that should be divided into judges (total pool amount = amount * members.length where members.length == s_memberNumber - 1) (only valid for judges who had judged every claim request)\\n        address exchangeFactoryAddress, // address of exchange factory contract\\n        bool useLiquidityPool, // if true, the insurance contract will add funds to liquidity pool\\n        address liquidityTokenAddress, // address of liquidity token\\n        uint256 liquidityTokenAmount, // amount of liquidity token to add to liquidity pool\\n        string memory groupId\\n    ) {\\n        require(minMembers > 0, \\\"Insurance: minMembers should be greater than 0\\\");\\n        require(requestTime > 0, \\\"Insurance: requestTime should be greater than 0\\\");\\n        require(validity > 0, \\\"Insurance: validity should be greater than 0\\\");\\n        require(claimTime > 0, \\\"Insurance: judgingStartTime should be greater than 0\\\");\\n        require(judgingTime > 0, \\\"Insurance: judgingTime should be greater than 0\\\");\\n        require(judgesLength > 0, \\\"Insurance: judgesLength should be greater than 0\\\");\\n        require(\\n            judgesLength <= minMembers,\\n            \\\"Insurance: judgesLength should be less than or equal to minMembers\\\"\\n        );\\n        require(amount > 0, \\\"Insurance: amount should be greater than 0\\\");\\n        require(\\n            percentDivideIntoJudges > 0,\\n            \\\"Insurance: percentDivideIntoJudges should be greater than 0\\\"\\n        );\\n        require(\\n            percentDivideIntoJudges <= 100,\\n            \\\"Insurance: percentDivideIntoJudges should be less than or equal to 100\\\"\\n        );\\n        require(\\n            exchangeFactoryAddress != address(0),\\n            \\\"Insurance: exchangeFactoryAddress should not be 0x0\\\"\\n        );\\n        require(\\n            useLiquidityPool == false || liquidityTokenAddress != address(0),\\n            \\\"Insurance: liquidityTokenAddress should not be 0x0\\\"\\n        );\\n        require(\\n            useLiquidityPool == false || liquidityTokenAmount > 0,\\n            \\\"Insurance: liquidityTokenAmount should be greater than 0\\\"\\n        );\\n\\n        s_baseUri = baseUri;\\n        i_minMembers = minMembers;\\n        i_requestBefore = block.timestamp + requestTime;\\n        i_validity = i_requestBefore + validity;\\n        i_judgingStartTime = i_validity + claimTime;\\n        i_judgingEndTime = i_judgingStartTime + judgingTime;\\n        i_judgesLength = judgesLength;\\n        i_amount = amount;\\n        i_percentageDividedIntoJudges = percentDivideIntoJudges;\\n        i_exchangeFactoryAddress = exchangeFactoryAddress;\\n        i_exchangeAddress = useLiquidityPool\\n            ? IExchangeFactory(exchangeFactoryAddress).getExchange(liquidityTokenAddress)\\n            : address(0);\\n        require(\\n            useLiquidityPool == false || i_exchangeAddress != address(0),\\n            \\\"Insurance: exchangeAddress should not be 0x0, try creating exchange in exchange factory first\\\"\\n        );\\n        i_useLiquidityPool = useLiquidityPool;\\n        i_liquidityTokenAddress = liquidityTokenAddress;\\n        i_liquidityTokenAmount = liquidityTokenAmount;\\n        s_groupId = groupId;\\n    }\\n\\n    // function getBaseUri() public view returns (string memory) {\\n    //     return s_baseUri;\\n    // }\\n\\n    // function getMemberNumber(address memberAddress) public view returns (uint256) {\\n    //     return s_addressToMemberId[memberAddress];\\n    // }\\n\\n    // function getMemberAddress(uint256 memberNumber) public view returns (address) {\\n    //     return s_idToMemberAddress[memberNumber];\\n    // }\\n\\n    // function getMemberCount() public view returns (uint256) {\\n    //     return s_memberNumber - 1;\\n    // }\\n\\n    // function getRequestNumber() public view returns (uint256) {\\n    //     return s_requestNumber - 1;\\n    // }\\n\\n    // function getRequest(uint256 requestId) public view returns (MemberRequest memory) {\\n    //     return s_idToRequest[requestId];\\n    // }\\n\\n    // function getAcceptance(uint256 requestId, address memberAddress) public view returns (bool) {\\n    //     return s_acceptances[Acceptance(memberAddress, requestId)];\\n    // }\\n\\n    // function getClaimNumber() public view returns (uint256) {\\n    //     return s_claimNumber - 1;\\n    // }\\n\\n    function addAsMember() public {\\n        require(block.timestamp < i_requestBefore, \\\"Adding member is not valid anymore\\\");\\n        require(s_addressToMemberId[msg.sender] == 0, \\\"Already a member\\\");\\n        require(\\n            s_idToMemberRequest[s_addressToRequestId[msg.sender]].accepted == s_memberNumber - 1,\\n            \\\"Not all members accepted the request\\\"\\n        );\\n        uint256 id = s_addressToRequestId[msg.sender];\\n        s_idToMemberRequest[id] = MemberRequest(address(0), \\\"\\\", 0);\\n        s_addressToRequestId[msg.sender] = 0;\\n\\n        s_idToMemberAddress[s_memberNumber] = msg.sender;\\n        s_addressToMemberId[msg.sender] = s_memberNumber;\\n        s_memberNumber++;\\n\\n        // add funds to liquidity pool\\n        if (i_useLiquidityPool) {\\n            uint tokenReserve = IERC20(i_liquidityTokenAddress).balanceOf(address(this));\\n            uint exchangeTokenReserve = IERC20(i_liquidityTokenAddress).balanceOf(\\n                i_exchangeAddress\\n            );\\n            uint balance = address(this).balance;\\n            if (exchangeTokenReserve == 0) {\\n                IExchange(i_exchangeAddress).addLiquidity{value: balance}(tokenReserve);\\n            } else {\\n                uint exchangeBalance = address(i_exchangeAddress).balance;\\n                if (tokenReserve * exchangeBalance >= exchangeTokenReserve * balance) {\\n                    IExchange(i_exchangeAddress).addLiquidity{value: balance}(tokenReserve);\\n                } else {\\n                    uint amount = (tokenReserve * exchangeBalance) / exchangeTokenReserve;\\n                    IExchange(i_exchangeAddress).addLiquidity{value: amount}(tokenReserve);\\n                }\\n            }\\n        }\\n    }\\n\\n    // function addRequest(string memory requestUri) public {\\n    //     s_requests[s_requestNumber] = MemberRequest(msg.sender, requestUri, new uint256[](0));\\n    //     s_requestNumber++;\\n    // }\\n\\n    function acceptJoiningRequest(uint256 requestId) public {\\n        require(s_addressToMemberId[msg.sender] != 0, \\\"Not a member\\\");\\n        require(\\n            s_idToMemberRequest[requestId].memberAddress != address(0),\\n            \\\"Request does not exist\\\"\\n        );\\n        require(\\n            s_memberRequestAcceptances[abi.encode(msg.sender, requestId)] == false,\\n            \\\"Already accepted\\\"\\n        );\\n        s_memberRequestAcceptances[abi.encode(msg.sender, requestId)] = true;\\n        s_idToMemberRequest[requestId].accepted += 1;\\n    }\\n\\n    function makeJoiningRequest(string memory uri) public payable {\\n        require(msg.value == i_amount, \\\"Amount sent isn't correct\\\");\\n        require(block.timestamp < i_requestBefore, \\\"Adding member is not valid anymore\\\");\\n        require(s_addressToMemberId[msg.sender] == 0, \\\"Member already exists\\\");\\n        require(s_addressToRequestId[msg.sender] == 0, \\\"Request already exists\\\");\\n        if (i_useLiquidityPool) {\\n            IERC20 token = IERC20(i_liquidityTokenAddress);\\n            token.transferFrom(msg.sender, address(this), i_liquidityTokenAmount);\\n        }\\n        s_idToMemberRequest[s_requestNumber] = MemberRequest(msg.sender, uri, 0);\\n        s_addressToRequestId[msg.sender] = s_requestNumber;\\n        s_requestNumber++;\\n    }\\n\\n    // here amount is in native token\\n    function requestForInsurance(string memory baseUri, uint256 amount) public {\\n        require(block.timestamp > i_validity, \\\"Contract is not valid anymore\\\");\\n        require(block.timestamp < i_judgingStartTime, \\\"Judging already started\\\");\\n        require(s_addressToMemberId[msg.sender] != 0, \\\"Not a member\\\");\\n        require(s_addressToClaimId[msg.sender] == 0, \\\"Insurance already exists\\\");\\n        s_addressToClaimId[msg.sender] = s_claimNumber;\\n        s_idToClaimRequest[s_claimNumber] = InsuranceClaimRequest(msg.sender, baseUri, amount, 0);\\n        s_totalClaimAmountRequested += amount;\\n        s_claimNumber++;\\n    }\\n\\n    // judges will judge insurance claim requests\\n    function updateInsurance(uint256 claimId, bool accepted, string memory reasonUri) public {\\n        require(block.timestamp > i_judgingStartTime, \\\"Judging not started yet\\\");\\n        require(block.timestamp < i_judgingEndTime, \\\"Judging already ended\\\");\\n        require(s_addressToJudgeId[msg.sender] != 0, \\\"Not a judge\\\");\\n        require(\\n            s_idToClaimRequest[claimId].memberAddress != address(0),\\n            \\\"Insurance does not exist\\\"\\n        );\\n        if (\\n            (s_judgements[abi.encode(msg.sender, claimId)].accepted == false &&\\n                bytes(reasonUri).length != 0) ||\\n            (s_judgements[abi.encode(msg.sender, claimId)].accepted == true)\\n        ) {\\n            revert(\\\"Already updated\\\");\\n        }\\n        if (!accepted) {\\n            require(bytes(reasonUri).length != 0, \\\"Reason uri is empty\\\");\\n        }\\n        s_judgements[abi.encode(msg.sender, claimId)] = Judgement(accepted, reasonUri);\\n        if (accepted) {\\n            s_idToClaimRequest[claimId].accepted += 1;\\n        }\\n        s_judged[msg.sender] += 1;\\n    }\\n\\n    function selectJudges(uint256 randomNumber) public onlyOwner {\\n        require(block.timestamp > i_judgingStartTime, \\\"Judging not started yet\\\");\\n        require(block.timestamp < i_judgingEndTime, \\\"Judging already ended\\\");\\n        require(s_isMinMembersReachedCalculated == false, \\\"Judges already selected\\\");\\n        if (!s_isMinMembersReachedCalculated && s_memberNumber - 1 < i_minMembers) {\\n            s_isMinMembersReachedCalculated = true;\\n            s_isMinMembersReached = false;\\n            for (uint256 i = 1; i < s_memberNumber; i++) {\\n                s_balance[s_idToMemberAddress[i]] += i_amount;\\n            }\\n            return;\\n        }\\n        s_isMinMembersReachedCalculated = true;\\n        s_isMinMembersReached = true;\\n        uint256 index = randomNumber % (s_memberNumber - 1);\\n        for (uint256 i = 1; i <= i_judgesLength; i++) {\\n            address judgeAddress = s_idToMemberAddress[index + i]; // as index for member starts from 1\\n            if (s_addressToJudgeId[judgeAddress] != 0) {\\n                i--;\\n                index = (index + index + i + 1) % (s_memberNumber - 1); // 2 * index + 1\\n                continue;\\n            }\\n            index = (index + index + i) % (s_memberNumber - 1); // 2 * index + 1\\n            s_addressToJudgeId[judgeAddress] = i;\\n            s_idToJudgeAddress[i] = judgeAddress;\\n        }\\n    }\\n\\n    function fullfillRequests() public {\\n        require(block.timestamp > i_judgingEndTime, \\\"Judging not ended yet\\\");\\n        require(s_isFinalJudgementCalculated == false, \\\"Already fullfilled\\\");\\n\\n        uint256 amountPerMember = i_amount; // in native token\\n        // remove liquidity from pool\\n        if (i_useLiquidityPool) {\\n            IExchange(i_exchangeAddress).removeLiquidity(\\n                IERC20(i_exchangeAddress).balanceOf(address(this))\\n            );\\n            uint256 balance = address(this).balance; // native token balance\\n            amountPerMember = (balance * 2) / (s_memberNumber - 1); // total balance ( in native token ) is total native token + total liquidity token and rate of liquidity token is with respect reserve of both tokens. Therefore, total liquidity token = total native token.\\n        }\\n\\n        s_isFinalJudgementCalculated = true;\\n        if (s_isMinMembersReachedCalculated && !s_isMinMembersReached) {\\n            return;\\n        }\\n        // if no judges were selected, then pay all members\\n        if (!s_isMinMembersReachedCalculated) {\\n            s_isMinMembersReachedCalculated = true;\\n            s_isMinMembersReached = false;\\n            for (uint256 i = 1; i < s_memberNumber; i++) {\\n                s_balance[s_idToMemberAddress[i]] += amountPerMember;\\n            }\\n            return;\\n        }\\n\\n        // check whether there's atleast one judge who fullfilled his job that is accepted everyone's request\\n        for (uint256 i = 1; i <= i_judgesLength; i++) {\\n            if (s_judged[s_idToJudgeAddress[i]] == s_claimNumber - 1) {\\n                s_judgesFullfilledJobs.push(JudgementJobFullfilled(i, 0));\\n            }\\n        }\\n\\n        // pay everyone except the judges as no one fullfilled their job\\n        if (s_judgesFullfilledJobs.length == 0) {\\n            uint256 amountForEachMember = (amountPerMember + i_judgesLength) / (s_memberNumber - 1);\\n            for (uint256 i = 1; i < s_memberNumber; i++) {\\n                if (s_addressToJudgeId[s_idToMemberAddress[i]] == 0) {\\n                    s_balance[s_idToMemberAddress[i]] += amountForEachMember; // no judge will get their money back\\n                }\\n            }\\n            return;\\n        }\\n\\n        // pay all the judges who fullfilled their job\\n        uint256 amountForEachJudge = ((i_percentageDividedIntoJudges *\\n            (s_memberNumber - 1) *\\n            amountPerMember) / (100 * s_judgesFullfilledJobs.length));\\n        uint256 amountLeftForMembers = ((amountPerMember * (s_memberNumber - 1)) -\\n            (amountForEachJudge * s_judgesFullfilledJobs.length));\\n        for (uint256 i = 0; i < s_judgesFullfilledJobs.length; i++) {\\n            s_judgesFullfilledJobs[i].amount = amountForEachJudge;\\n            s_balance[s_idToJudgeAddress[s_judgesFullfilledJobs[i].judgeId]] += amountForEachJudge;\\n        }\\n\\n        // check whether atleast one claim is accepted by majority of judges && calculate amount to be paid to insuranceClaimers who are accepted\\n        for (uint256 i = 1; i < s_claimNumber; i++) {\\n            if (s_idToClaimRequest[i].accepted > (i_judgesLength / 2)) {\\n                s_totalClaimAmountAccepted += s_idToClaimRequest[i].amount;\\n                s_claimAccepted.push(ClaimAccepted(i, 0));\\n            }\\n        }\\n\\n        // pay everyone except the judges as no one fullfilled their job\\n        if (s_claimAccepted.length == 0) {\\n            uint256 amountForEachMember = amountLeftForMembers / (s_memberNumber - 1);\\n\\n            // pay all the judges who fullfilled their job as amountForEachMember\\n            for (uint256 i = 0; i < s_judgesFullfilledJobs.length; i++) {\\n                s_balance[\\n                    s_idToJudgeAddress[s_judgesFullfilledJobs[i].judgeId]\\n                ] += amountForEachMember;\\n            }\\n            // pay everyone except the judges as amountForEachMember as either no one fullfilled their job or who fullfilled their job already got their money\\n            for (uint256 i = 1; i < s_memberNumber; i++) {\\n                if (s_addressToJudgeId[s_idToMemberAddress[i]] == 0) {\\n                    s_balance[s_idToMemberAddress[i]] += amountForEachMember;\\n                }\\n            }\\n            return;\\n        }\\n        uint256 extraAmount = 0;\\n        // calculate extra amount to be paid to insuranceClaimers who are accepted\\n        if (s_totalClaimAmountAccepted >= amountLeftForMembers) {\\n            extraAmount = s_totalClaimAmountAccepted - amountLeftForMembers;\\n            amountLeftForMembers = 0;\\n        } else {\\n            amountLeftForMembers -= s_totalClaimAmountAccepted;\\n        }\\n\\n        // pay insuranceClaimers who are accepted\\n        for (uint256 i = 0; i < s_claimAccepted.length; i++) {\\n            uint256 amountRequested = s_idToClaimRequest[s_claimAccepted[i].claimId].amount;\\n            uint256 amountToPay = amountRequested -\\n                ((amountRequested * extraAmount) / s_totalClaimAmountAccepted);\\n            s_claimAccepted[i].amount = amountToPay;\\n            s_balance[s_idToClaimRequest[s_claimAccepted[i].claimId].memberAddress] += amountToPay;\\n        }\\n        // if there's any amount left, pay it to everyone\\n        if (amountLeftForMembers > 0) {\\n            uint256 amountForEachMember = amountLeftForMembers / (s_memberNumber - 1);\\n            // pay all the judges who fullfilled their job as amountForEachMember\\n            for (uint256 i = 0; i < s_judgesFullfilledJobs.length; i++) {\\n                s_balance[\\n                    s_idToJudgeAddress[s_judgesFullfilledJobs[i].judgeId]\\n                ] += amountForEachMember;\\n            }\\n            // pay everyone except the judges as amountForEachMember as either no one fullfilled their job or who fullfilled their job already got their money\\n            for (uint256 i = 1; i < s_memberNumber; i++) {\\n                if (s_addressToJudgeId[s_idToMemberAddress[i]] == 0) {\\n                    s_balance[s_idToMemberAddress[i]] += amountForEachMember;\\n                }\\n            }\\n        }\\n    }\\n\\n    function withdraw() public {\\n        require(s_balance[msg.sender] > 0, \\\"No balance\\\");\\n        if (!i_useLiquidityPool) {\\n            uint256 amount = s_balance[msg.sender];\\n            s_balance[msg.sender] = 0;\\n            payable(msg.sender).transfer(amount);\\n        } else {\\n            uint256 amount = 0;\\n            uint256 tokenAmount = 0;\\n            uint256 balance = address(this).balance;\\n            uint256 tokenBalance = IERC20(i_liquidityTokenAddress).balanceOf(address(this));\\n\\n            // half of the amount will be paid in native token and half in liquidity token to avoid price slippage\\n            amount = s_balance[msg.sender] / 2;\\n            tokenAmount = (amount * tokenBalance) / balance;\\n\\n            s_balance[msg.sender] = 0;\\n\\n            payable(msg.sender).transfer(amount);\\n            IERC20(i_liquidityTokenAddress).transfer(msg.sender, tokenAmount);\\n        }\\n        // (bool success, ) = payable(msg.sender).call{value: amount}(\\\"\\\");\\n        // if (!success) {\\n        //     revert WithdrawFailed();\\n        // }\\n    }\\n\\n    // function withdrawMemberRequest() public {\\n    //     require(s_addressToRequestId[msg.sender] != 0, \\\"No request\\\");\\n    //     require(block.timestamp > i_requestBefore, \\\"Time is still left\\\");\\n    //     uint256 amount = i_amount;\\n    //     uint256 id = s_addressToRequestId[msg.sender];\\n    //     s_idToMemberRequest[id] = MemberRequest(address(0), \\\"\\\", 0);\\n    //     s_addressToRequestId[msg.sender] = 0;\\n    //     (bool success, ) = payable(msg.sender).call{value: amount}(\\\"\\\");\\n    //     if (!success) {\\n    //         revert WithdrawFailed();\\n    //     }\\n    // }\\n\\n    function getBaseUri() public view returns (string memory) {\\n        return s_baseUri;\\n    }\\n\\n    function getMinMembers() public view returns (uint256) {\\n        return i_minMembers;\\n    }\\n\\n    function getRequestBefore() public view returns (uint256) {\\n        return i_requestBefore;\\n    }\\n\\n    function getValidity() public view returns (uint256) {\\n        return i_validity;\\n    }\\n\\n    function getJudgingStartTime() public view returns (uint256) {\\n        return i_judgingStartTime;\\n    }\\n\\n    function getJudgingEndTime() public view returns (uint256) {\\n        return i_judgingEndTime;\\n    }\\n\\n    function getJudgesLength() public view returns (uint256) {\\n        return i_judgesLength;\\n    }\\n\\n    function getAmount() public view returns (uint256) {\\n        return i_amount;\\n    }\\n\\n    function getTotalMembers() public view returns (uint256) {\\n        return s_memberNumber - 1;\\n    }\\n\\n    function getDeadlineMet() public view returns (bool) {\\n        return getTotalMembers() >= i_minMembers;\\n    }\\n\\n    function getMemberById(uint256 id) public view returns (address) {\\n        return s_idToMemberAddress[id];\\n    }\\n\\n    function getMemberIdByAddress(address memberAddress) public view returns (uint256) {\\n        return s_addressToMemberId[memberAddress];\\n    }\\n\\n    function getTotalRequests() public view returns (uint256) {\\n        return s_requestNumber - 1;\\n    }\\n\\n    function getRequestById(uint256 id) public view returns (MemberRequest memory) {\\n        return s_idToMemberRequest[id];\\n    }\\n\\n    function getRequestIdByAddress(address memberAddress) public view returns (uint256) {\\n        return s_addressToRequestId[memberAddress];\\n    }\\n\\n    function getMemberRequestAcceptance(\\n        uint256 memberId,\\n        uint256 requestId\\n    ) public view returns (bool) {\\n        return s_memberRequestAcceptances[abi.encode(s_idToMemberAddress[memberId], requestId)];\\n    }\\n\\n    function getTotalClaims() public view returns (uint256) {\\n        return s_claimNumber - 1;\\n    }\\n\\n    function getClaimById(uint256 id) public view returns (InsuranceClaimRequest memory) {\\n        return s_idToClaimRequest[id];\\n    }\\n\\n    function getClaimIdByAddress(address memberAddress) public view returns (uint256) {\\n        return s_addressToClaimId[memberAddress];\\n    }\\n\\n    function getJudgeById(uint256 id) public view returns (address) {\\n        return s_idToJudgeAddress[id];\\n    }\\n\\n    function getJudgeIdByAddress(address memberAddress) public view returns (uint256) {\\n        return s_addressToJudgeId[memberAddress];\\n    }\\n\\n    function getJudgement(uint256 judgeId, uint256 claimId) public view returns (Judgement memory) {\\n        return s_judgements[abi.encode(s_idToJudgeAddress[judgeId], claimId)];\\n    }\\n\\n    function getJudged(address judgeAddress) public view returns (uint256) {\\n        return s_judged[judgeAddress];\\n    }\\n\\n    function getJudgesFullFilledJobs() public view returns (JudgementJobFullfilled[] memory) {\\n        return s_judgesFullfilledJobs;\\n    }\\n\\n    function getTotalJudgesFullFilledJobs() public view returns (uint256) {\\n        return s_judgesFullfilledJobs.length;\\n    }\\n\\n    function getClaimAcceptedLength() public view returns (uint256) {\\n        return s_claimAccepted.length;\\n    }\\n\\n    function getClaimsAccepted() public view returns (ClaimAccepted[] memory) {\\n        return s_claimAccepted;\\n    }\\n\\n    function getTotalClaimAmountRequested() public view returns (uint256) {\\n        return s_totalClaimAmountRequested;\\n    }\\n\\n    function getTotalClaimAmountAccepted() public view returns (uint256) {\\n        return s_totalClaimAmountAccepted;\\n    }\\n\\n    function getIsClaimFullfilled() public view returns (bool) {\\n        return s_isFinalJudgementCalculated;\\n    }\\n\\n    function getPercentageDividedIntoJudges() public view returns (uint256) {\\n        return i_percentageDividedIntoJudges;\\n    }\\n\\n    function getBalance(address memberAddress) public view returns (uint256) {\\n        return s_balance[memberAddress];\\n    }\\n\\n    function getIsMinimumMembersReachedCalculated() public view returns (bool) {\\n        return s_isMinMembersReachedCalculated;\\n    }\\n\\n    function getIsJudgeSelected() public view returns (bool) {\\n        return s_isMinMembersReachedCalculated; // both are calculated at the same time\\n    }\\n\\n    function getIsMinimumMembersReached() public view returns (bool) {\\n        return s_isMinMembersReached;\\n    }\\n\\n    function getGroupId() public view returns (string memory) {\\n        return s_groupId;\\n    }\\n\\n    // function getIsAnyClaimAccepted() public view returns (bool) {\\n    //     return s_claimAccepted.length > 0;\\n    // }\\n\\n    // function getIsAnyJudgeFullfilledTheirJob() public view returns (bool) {\\n    //     return s_judgesFullfilledJobs.length > 0;\\n    // }\\n}\\n\",\"keccak256\":\"0x13972b9c0963f02e4ede61ff9d53e07dbd07f3975f2bbf8b600fef8a35b7b702\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101408060405234610126576001600160401b03601f61520838819003918201601f19168401918383118584101761010b5780859260a0946040528339810103126101045761004d8261012c565b9060208301519081168114156100fc57604083015160608401519163ffffffff83168314156100f25761008560806100ab960161012c565b60808590526001600160a01b0390941660a05260e09190915260c0526101005261012052565b6040516150c6908161014282396080518161061c015260a05181610a54015260c051816109e1015260e051816109bb01526101005181610a17015261012051816108b70152f35b5050505050600080fd5b505050600080fd5b5050600080fd5b5050505050634e487b7160e01b600052604160045260246000fd5b50600080fd5b51906001600160a01b0382168214156101045756fe604060808152600436101562000016575b50600080fd5b600090813560e01c80631fe543e314620001d35780634585e33b14620001b357806368065289146200016e5780636e04ff0d146200013c5780636ebc8c86146200010e578063ba6731c014620000e3578063c3a2a93a14620000b55763fccc134f1462000084575062000010565b34620000b157620000ad91506200009b36620005aa565b60015490519081529081906020820190565b0390f35b5080fd5b5034620000b157620000ad9150620000cd36620005aa565b620000d762000d02565b905191829182620005c5565b50620000ad9150620000ff620000f93662000585565b620009ac565b90519081529081906020820190565b5034620000b157620000ad9150620001306200012a366200053e565b62000d63565b90519182918262000573565b5034620000b157620000ad915062000154366200033c565b50506200016062000bb8565b929091519283928362000523565b50620000ad91506200019a620001843662000418565b9b9a909a99919998929897939796949662000834565b90516001600160a01b0390911681529081906020820190565b5034620000b157620001d0620001c9366200033c565b9062000aeb565b51f35b5034620000b157620001d0620001e93662000291565b9062000611565b50634e487b7160e01b600052604160045260246000fd5b606081019081106001600160401b038211176200022357604052565b6200022d620001f0565b604052565b601f909101601f19168101906001600160401b038211908210176200022357604052565b60405190620002658262000207565b565b6020906001600160401b03811162000281575b60051b0190565b6200028b620001f0565b6200027a565b9060406003198301126200033557600435916024356001600160401b0381116200032c57816023820112156200032c57806004013591620002d28362000267565b92620002e2604051948562000232565b80845260209260248486019260051b8201019283116200032057602401905b82821062000310575050505090565b8135815290830190830162000301565b50505050505050600080fd5b50505050600080fd5b5050600080fd5b90602060031983011262000335576001600160401b0391600435908382116200032c57806023830112156200032c5781600401359384116200032c57602484830101116200038b576024019190565b505050600080fd5b81601f820112156200038b578035906001600160401b038211620003ef575b60405192620003cc601f8401601f19166020018562000232565b828452602083830101116200032c57816000926020809301838601378301015290565b620003f9620001f0565b620003b2565b61014435906001600160a01b0382168214156200033557565b6101a060031982011262000335576001600160401b03906004358281116200032c5781620004499160040162000393565b926024359260443592606435926084359260a4359260c4359260e43592610104359261012435801515811415620004bc579262000485620003ff565b92610164359261018435918211620004a857620004a59160040162000393565b90565b505050505050505050505050505050600080fd5b50505050505050505050505050600080fd5b91908251928382526000905b8482106200050a575092806020939411620004fc575b601f01601f1916010190565b6000838284010152620004f0565b90602090818082850101519082860101520190620004da565b604090620004a59392151581528160208201520190620004ce565b6020906003190112620000105760043590565b80516001600160a01b0316825260208082015190830152604090810151910152565b60608101929162000265919062000551565b602090600319011262000010576004356001600160a01b038116811415620003355790565b60009060031901126200001057565b60009103126200001057565b6020908160408183019282815285518094520193019160005b828110620005ed575050505090565b909192938260608262000604600194895162000551565b01950193929101620005de565b906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811633811415620006cf575062000662906000938452836020526040842054169162000b8e565b51813b15620006c857604051631a9d787960e01b8152600481019190915291908290602490829084905af18015620006b8575b6200069d5750565b6200026590620006ae3d8262000232565b3d810190620005b9565b620006c2620006f2565b62000695565b5050809150fd5b92505050604491506040519063073e64fd60e21b82523360048301526024820152fd5b506040513d6000823e3d90fd5b50634e487b7160e01b600052601160045260246000fd5b8119811162000723570190565b6200072d620006ff565b0190565b50634e487b7160e01b600052603260045260246000fd5b60015481101562000769575b60016000526003602060002091020190600090565b6200077362000731565b62000754565b80546001600160a01b0319166001600160a01b03909216919091179055565b600260406001546001821b81101562000824575b600181018060015581101562000814575b600160005283516003919091027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601939062000803906001600160a01b03168562000779565b602081015160018501550151910155565b6200081e62000731565b620007bd565b6200082e620001f0565b620007ac565b939a9298909499919b95978c97604051998a996142ed97888c01988c8a1060018060401b038b11176200098c575b62000d968d396101c0808a5289016200087b91620004ce565b60208901999099526040880152606087018c9052608087018e905260a087018d905260c087015260e08601526101008501526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001661012085015215156101408401526001600160a01b0316610160830152610180820152808203906101a001526200090e91620004ce565b03906000f0938415936200093b62000949936200093b6200094194620004a5986200097c575b4262000716565b62000716565b918262000716565b6001600160a01b03909316926200095f62000256565b6001600160a01b0385168152916020830152604082015262000798565b62000986620006f2565b62000934565b62000996620001f0565b62000862565b9081602091031262000335575190565b6040516305d3b1d360e41b81527f000000000000000000000000000000000000000000000000000000000000000060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160401b03166024820152600360448201527f000000000000000000000000000000000000000000000000000000000000000063ffffffff16606482015260016084820152919060208360a48160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af192831562000adb575b60009362000ab1575b50620002659062000aab846000526000602052604060002090565b62000779565b6200026591935062000ad39062000ac93d8262000232565b3d8101906200099c565b929062000a90565b62000ae5620006f2565b62000a87565b90816040918101031262000335578035602062000b1a62000b0c8362000748565b50546001600160a01b031690565b9201351562000b6e57600262000b3260009262000748565b5001556001600160a01b0316803b156200033557600080916004604051809481936305bbfb2560e31b83525af18015620006b8576200069d5750565b906000600162000b8262000b8b9462000748565b500155620009ac565b50565b60209080511562000b9d570190565b6200072d62000731565b600190600019811462000723570190565b6060600091600060018054915b82811062000bd257505050565b8162000bde8262000748565b50015415158062000cb7575b8062000c9e575b62000c755762000c018162000748565b506002809101541515908162000c5c575b5062000c295762000c239062000ba7565b62000bc5565b604080516020810192909252600190820152909450919250620004a5905081606081015b03601f19810183528262000232565b905062000c698262000748565b50015442113862000c12565b604080516020810192909252600090820152909450919250620004a59050816060810162000c4d565b50600262000cac8262000748565b500154421062000bf1565b508162000cc48262000748565b500154421162000bea565b9060405162000cde8162000207565b82546001600160a01b03168152600183015460208201526002909201546040830152565b60019081549162000d138362000267565b9262000d23604051948562000232565b808452600082815260208082208187015b84841062000d4457505050505050565b600383879262000d548562000ccf565b81520192019301929062000d34565b62000d8e620004a59160006040805162000d7d8162000207565b828152826020820152015262000748565b5062000ccf56fe6103a0604052346200015e57620000326200001962000284565b9c9b909b9a919a99929998939897949796959662000c94565b6040516132ff908162000fae82396080518181816105520152818161243c0152612f9f015260a0518181816108070152818161135c0152611959015260c05181818161075d0152611c5e015260e05181818161084101528181611c9401528181611fce01526122200152610100518181816106c301528181611ff90152818161224b01526126020152610120518181816108ae015281816122c901526126b50152610140518181816103630152818161192e015281816123c4015261263f01526101605181818161045f015261270b0152610180518150506101a0518181816114c90152612ade01526101c05181818161143e015281816119a7015281816126610152612c1701526101e05181818161147d01528181611a570152612c9101526102005181611a210152f35b600080fd5b50634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b038211908210176200019e57604052565b620001a862000163565b604052565b9080601f8301121562000250578151906001600160401b03821162000240575b60405192602091620001e9601f8501601f19168401866200017a565b838552828483010111620002365782906000905b838383106200021d575050116200021357505090565b6000918301015290565b81935082819392010151828288010152018391620001fd565b5050505050600080fd5b6200024a62000163565b620001cd565b505050600080fd5b51906001600160a01b0382168214156200026e57565b5050600080fd5b51908115158214156200026e57565b620042ed9081380380604051936200029d82866200017a565b84398201916101c081840312620002505780516001600160401b039290838111620002365784620002d0918401620001ad565b9160208101519460408201519460608301519460808401519460a08501519460c08101519460e0820151946101008301519462000311610120850162000258565b9462000321610140860162000275565b9462000331610160820162000258565b94610180820151946101a08301519081116200036457620003539201620001ad565b919d9c9b9a99989796959493929190565b5050505050505050505050505050505050600080fd5b156200038257565b5060405162461bcd60e51b815260206004820152602e60248201527f496e737572616e63653a206d696e4d656d626572732073686f756c642062652060448201526d067726561746572207468616e20360941b6064820152608490fd5b15620003e757565b5060405162461bcd60e51b815260206004820152602f60248201527f496e737572616e63653a207265717565737454696d652073686f756c6420626560448201526e02067726561746572207468616e203608c1b6064820152608490fd5b156200044d57565b5060405162461bcd60e51b815260206004820152602c60248201527f496e737572616e63653a2076616c69646974792073686f756c6420626520677260448201526b06561746572207468616e20360a41b6064820152608490fd5b15620004b057565b5060405162461bcd60e51b815260206004820152603460248201527f496e737572616e63653a206a756467696e67537461727454696d652073686f7560448201527306c642062652067726561746572207468616e20360641b6064820152608490fd5b156200051b57565b5060405162461bcd60e51b815260206004820152602f60248201527f496e737572616e63653a206a756467696e6754696d652073686f756c6420626560448201526e02067726561746572207468616e203608c1b6064820152608490fd5b156200058157565b5060405162461bcd60e51b81526020600482015260306024820152600080516020620042ad83398151915260448201526f0652067726561746572207468616e20360841b6064820152608490fd5b15620005d757565b5060405162461bcd60e51b81526020600482015260426024820152600080516020620042ad83398151915260448201527f65206c657373207468616e206f7220657175616c20746f206d696e4d656d6265606482015261727360f01b608482015260a490fd5b156200064557565b5060405162461bcd60e51b815260206004820152602a60248201527f496e737572616e63653a20616d6f756e742073686f756c6420626520677265616044820152690746572207468616e20360b41b6064820152608490fd5b15620006a657565b5060405162461bcd60e51b815260206004820152603b6024820152600080516020620042cd83398151915260448201527a065732073686f756c642062652067726561746572207468616e203602c1b6064820152608490fd5b156200070757565b5060405162461bcd60e51b81526020600482015260466024820152600080516020620042cd83398151915260448201527f65732073686f756c64206265206c657373207468616e206f7220657175616c206064820152650746f203130360d41b608482015260a490fd5b156200077957565b5060405162461bcd60e51b815260206004820152603360248201527f496e737572616e63653a2065786368616e6765466163746f72794164647265736044820152720732073686f756c64206e6f742062652030783606c1b6064820152608490fd5b15620007e357565b5060405162461bcd60e51b815260206004820152603260248201527f496e737572616e63653a206c6971756964697479546f6b656e4164647265737360448201527102073686f756c64206e6f74206265203078360741b6064820152608490fd5b156200084c57565b5060405162461bcd60e51b815260206004820152603860248201527f496e737572616e63653a206c6971756964697479546f6b656e416d6f756e7420604482015277073686f756c642062652067726561746572207468616e20360441b6064820152608490fd5b90600182811c92168015620008e7575b6020831014620008cf57565b5050634e487b7160e01b600052602260045260246000fd5b91607f1691620008c3565b90601f821162000900575050565b60019160009083825260208220906020601f850160051c8301941062000943575b601f0160051c01915b828110620009385750505050565b81815583016200092a565b909250829062000921565b601f81116200095b575050565b6000906002825260208220906020601f850160051c830194106200099c575b601f0160051c01915b8281106200099057505050565b81815560010162000983565b90925082906200097a565b80519091906001600160401b03811162000a99575b600190620009d681620009d08454620008b3565b620008f2565b602080601f831160011462000a1457508192939460009262000a08575b5050600019600383901b1c191690821b179055565b015190503880620009f3565b6001600052601f198316959091907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6926000905b88821062000a81575050838596971062000a67575b505050811b019055565b015160001960f88460031b161c1916905538808062000a5d565b80878596829496860151815501950193019062000a48565b62000aa362000163565b620009bc565b80519091906001600160401b03811162000b9d575b62000ad68162000ad0600254620008b3565b6200094e565b602080601f831160011462000b15575081929360009262000b09575b50508160011b916000199060031b1c191617600255565b01519050388062000af2565b6002600052601f198316949091907f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace926000905b87821062000b8457505083600195961062000b6a575b505050811b01600255565b015160001960f88460031b161c1916905538808062000b5f565b8060018596829496860151815501950193019062000b49565b62000ba762000163565b62000abe565b8119811162000bba570190565b505050634e487b7160e01b600052601160045260246000fd5b908160209103126200026e5762000bea9062000258565b90565b506040513d6000823e3d90fd5b1562000c0257565b5060405162461bcd60e51b815260206004820152605d60248201527f496e737572616e63653a2065786368616e6765416464726573732073686f756c60448201527f64206e6f74206265203078302c20747279206372656174696e6720657863686160648201527f6e676520696e2065786368616e676520666163746f7279206669727374000000608482015260a490fd5b949a62000e179a62000e219d92949a62000e309f94999a62000e0d9b62000d18989f9a62000dff9b89610300526103805261024052610280526102c05261022052610320526102a0526102e0526102605262000cef62000f63565b62000cfa6001600755565b62000d056001600a55565b62000d106001600e55565b15156200037a565b62000d25831515620003df565b62000d3285151562000445565b62000d3f871515620004a8565b62000d4f61038051151562000513565b62000d5f61024051151562000579565b62000d7361030051610240511115620005cf565b62000d836102805115156200063d565b62000d936102c05115156200069e565b62000da560646102c0511115620006ff565b610220516001600160a01b031661034081905262000dc590151562000771565b61032051158061036052801562000f4d575b62000de290620007db565b61036051801562000f40575b62000df99062000844565b620009a7565b610300516080524262000bad565b8060a05262000bad565b8060c05262000bad565b8060e052610380519062000bad565b61010052610240516101205261028051610140526102c05161016052610220516101805260006103205160001462000f3557506040516303795fb160e11b81526102a0516001600160a01b0316600482015262000ec690602081806024810103816000610340515af190811562000f25575b60009162000f02575b505b806101a0526103605190811562000eee575b5062000bfa565b610320516101c0526102a0516101e0526102e0516102005262000eec6102605162000aa9565b565b6001600160a01b0316151590503862000ebf565b62000f1e915062000f143d826200017a565b3d81019062000bd3565b3862000eab565b62000f2f62000bed565b62000ea2565b62000ec69062000ead565b506102e051151562000dee565b506102a0516001600160a01b0316151562000dd7565b60008054336001600160a01b031982168117835560405190926001600160a01b03909216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a356fe6040608081526004361015610015575b50600080fd5b600090813560e01c8063071694fb146109545780630a4b5162146109225780630cac36b21461090657806313284cdd146108d4578063134fe3041461089a57806316daa23b1461087e5780631a9d7879146108675780631e1e94991461082d578063201095b7146107f3578063253ecfcf146107c157806326757b731461079a5780632ddfd928146107835780633b7f7cfa146107495780633ccfd60b146107325780633e035c78146107005780633f952091146106e95780634340b213146106af5780634c6ee3821461069d5780635ee8906d1461067757806365b21d14146106505780636f80886c14610613578063715018a6146105fc5780637248f579146105e057806379ee10b0146105b55780637d4b1a5f1461058f5780638170aff0146105785780638618e9d31461053e5780638c9a92a2146104b75780638da5cb5b146105165780638f180305146104fa578063a095f2b4146104e2578063b0118f4a146104b7578063b035d6e114610485578063b7e44ba41461044b578063bfbdef7e14610425578063c4677c04146103ff578063c864b70e146103e7578063cf1dd2b4146103c0578063cfdd1ce31461038e578063d321fe291461034f578063e12c2d9114610327578063e1aac42014610300578063e57384db146102d2578063ed3ee1de146102a5578063f0e22d5214610289578063f2fde38b1461026f5763f8b2cb4f14610227575061000f565b3461026b57610267915061025861023d36610987565b6001600160a01b031660009081526017602052604090205490565b90519081529081906020820190565b0390f35b5080fd5b503461026b5761028661028136610987565b610daf565b51f35b503461026b57610267915061029d366109b1565b610258612fc3565b503461026b5761026791506102b9366109b1565b6102c1612f95565b905191829182901515815260200190565b503461026b5761026791506102e6366109b1565b60ff60035460081c16905191829182901515815260200190565b503461026b576102679150610314366109b1565b61031c612e4a565b905191829182610a19565b503461026b57610267915061034461033e36610971565b906130fa565b905191829182610cf5565b5090346103895750610360366109b1565b517f00000000000000000000000000000000000000000000000000000000000000008152602090f35b809150fd5b503461026b5761026791506102586103a536610987565b6001600160a01b031660009081526009602052604090205490565b503461026b5761026791506103d4366109b1565b6103dc613224565b905191829182610c2a565b503461026b576102866103f936610cb0565b91611fc8565b503461026b576102679150610413366109b1565b60155490519081529081906020820190565b503461026b576102679150610439366109b1565b60045490519081529081906020820190565b509034610389575061045c366109b1565b517f00000000000000000000000000000000000000000000000000000000000000008152602090f35b503461026b57610267915061025861049c36610987565b6001600160a01b03166000908152600b602052604090205490565b503461026b5761026791506104cb366109b1565b60ff60035416905191829182901515815260200190565b503461026b576102866104f436610c74565b90611c5c565b503461026b57610267915061050e366109b1565b610258612f83565b503461026b5761026791610529366109b1565b5490519182916001600160a01b031682610a76565b509034610389575061054f366109b1565b517f00000000000000000000000000000000000000000000000000000000000000008152602090f35b503461026b5761028661058a36610a2d565b611740565b503461026b5761026791506105a3366109b1565b60055490519081529081906020820190565b503461026b5761026791506105c9366109b1565b60ff60065416905191829182901515815260200190565b503461026b5761026791506105f4366109b1565b6103dc6131ad565b503461026b5761060b366109b1565b610286610d18565b503461026b57610267915061064561062a36610a2d565b6000908152600860205260409020546001600160a01b031690565b905191829182610a76565b503461026b57610267915061066c61066736610a2d565b61308b565b905191829182610be9565b503461026b57610267915061068b366109b1565b60165490519081529081906020820190565b506102866106aa36610bbf565b611925565b50903461038957506106c0366109b1565b517f00000000000000000000000000000000000000000000000000000000000000008152602090f35b503461026b576106f8366109b1565b610286611357565b503461026b57610267915061064561071736610a2d565b6000908152601260205260409020546001600160a01b031690565b503461026b57610741366109b1565b610286612c01565b509034610389575061075a366109b1565b517f00000000000000000000000000000000000000000000000000000000000000008152602090f35b503461026b57610792366109b1565b6102866125fd565b503461026b5761026791506107b66107b136610a2d565b612fd5565b905191829182610a3f565b503461026b5761026791506102586107d836610987565b6001600160a01b03166000908152600f602052604090205490565b5090346103895750610804366109b1565b517f00000000000000000000000000000000000000000000000000000000000000008152602090f35b509034610389575061083e366109b1565b517f00000000000000000000000000000000000000000000000000000000000000008152602090f35b503461026b5761028661087936610a2d565b6121a0565b503461026b576102679150610892366109b1565b610258613079565b50903461038957506108ab366109b1565b517f00000000000000000000000000000000000000000000000000000000000000008152602090f35b503461026b5761026791506102586108eb36610987565b6001600160a01b031660009081526011602052604090205490565b503461026b57610267915061091a366109b1565b61031c612db2565b503461026b57610267915061025861093936610987565b6001600160a01b031660009081526014602052604090205490565b503461026b5761026791506102c161096b36610971565b90613034565b604090600319011261000f576004359060243590565b602090600319011261000f576004356001600160a01b0381168114156109aa5790565b5050600080fd5b600090600319011261000f57565b918091926000905b8282106109df5750116109d8575050565b6000910152565b915080602091830151818601520182916109c7565b90602091610a0d815180928185528580860191016109bf565b601f01601f1916010190565b906020610a2a9281815201906109f4565b90565b602090600319011261000f5760043590565b6020815260018060a01b03825116602082015260606040610a6d6020850151838386015260808501906109f4565b93015191015290565b6001600160a01b03909116815260200190565b50634e487b7160e01b600052604160045260246000fd5b606081019081106001600160401b03821117610abb57604052565b610ac3610a89565b604052565b608081019081106001600160401b03821117610abb57604052565b604081019081106001600160401b03821117610abb57604052565b601f909101601f19168101906001600160401b03821190821017610abb57604052565b60405190610b2e82610aa0565b565b60405190610b2e82610ac8565b60405190610b2e82610ae3565b81601f82011215610bb7578035906001600160401b038211610baa575b60405192610b7f601f8401601f191660200185610afe565b82845260208383010111610ba157816000926020809301838601378301015290565b50505050600080fd5b610bb2610a89565b610b67565b505050600080fd5b60206003198201126109aa57600435906001600160401b038211610bb757610a2a91600401610b4a565b6020815260018060a01b03825116602082015260806060610c18602085015183604086015260a08501906109f4565b93604081015182850152015191015290565b60208082019080835283518092528060408094019401926000905b838210610c5457505050505090565b845180518752830151868401529485019493820193600190910190610c45565b60406003198201126109aa57600435906001600160401b038211610bb757610c9e91600401610b4a565b9060243590565b801515141561000f57565b60606003198201126109aa5760043591602435610ccc81610ca5565b91604435906001600160401b038211610ceb57610a2a91600401610b4a565b5050505050600080fd5b60606020610a2a93818452805115158285015201519160408082015201906109f4565b610d20610d55565b600080546001600160a01b0319811682556040516001600160a01b039091169060008051602061329c833981519152908390a3565b6000546001600160a01b0316331415610d6a57565b50606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b610db7610d55565b6001600160a01b03908116908115610df657600080546001600160a01b031981168417825560405192169160008051602061329c8339815191529190a3565b505060405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260849150fd5b80546001600160a01b0319166001600160a01b03909216919091179055565b15610e7357565b5060405162461bcd60e51b815260206004820152602260248201527f416464696e67206d656d626572206973206e6f742076616c696420616e796d6f604482015261726560f01b6064820152608490fd5b6001600160a01b0316600090815260096020526040902090565b6001600160a01b03166000908152600b6020526040902090565b6001600160a01b03166000908152600f6020526040902090565b6001600160a01b0316600090815260116020526040902090565b6001600160a01b0316600090815260146020526040902090565b6001600160a01b0316600090815260176020526040902090565b15610f6757565b5060405162461bcd60e51b815260206004820152601060248201526f20b63932b0b23c90309036b2b6b132b960811b6044820152606490fd5b600052600c602052604060002090565b6000526008602052604060002090565b6000526010602052604060002090565b6000526012602052604060002090565b50634e487b7160e01b600052601160045260246000fd5b60018110611007575b6000190190565b61100f610fe0565b611000565b81811061101f570390565b611027610fe0565b0390565b1561103257565b5060405162461bcd60e51b8152602060048201526024808201527f4e6f7420616c6c206d656d6265727320616363657074656420746865207265716044820152631d595cdd60e21b6064820152608490fd5b60405190602082016001600160401b038111838210176110a8575b60405260008252565b6110b0610a89565b61109f565b50634e487b7160e01b600052600060045260246000fd5b90600182811c921680156110fe575b60208310146110e657565b5050634e487b7160e01b600052602260045260246000fd5b91607f16916110db565b90601f811161111657505050565b600091825260208220906020601f850160051c83019410611152575b601f0160051c01915b82811061114757505050565b81815560010161113b565b9092508290611132565b8151909190611174906001600160a01b031683610e4d565b6020808201518051909291600185810192916001600160401b038311611264575b6111a9836111a386546110cc565b86611108565b80601f84116001146111ee57509180809260409695946002986000946111e3575b50501b916000199060031b1c19161790555b0151910155565b0151925038806111ca565b91939495601f19841661120687600052602060002090565b936000905b82821061124d5750509160029795939185604098969410611234575b505050811b0190556111dc565b015160001960f88460031b161c19169055388080611227565b80888697829497870151815501960194019061120b565b61126c610a89565b611195565b6001906000198114611281570190565b611289610fe0565b0190565b908160209103126109aa575190565b506040513d6000823e3d90fd5b8060001904600211811515166112c0575b60011b90565b6112c8610fe0565b6112ba565b7f028f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f81116001166112fe575b60640290565b611306610fe0565b6112f8565b806000190482118115151661131e570290565b611326610fe0565b0290565b50634e487b7160e01b600052601260045260246000fd5b811561134b570490565b61135361132a565b0490565b6113827f00000000000000000000000000000000000000000000000000000000000000004210610e6c565b61139561138e33610ec4565b5415610f60565b6113bf60026113ac6113a633610ede565b54610fa0565b01546113b9600754610ff7565b1461102b565b6113c833610ede565b546113d1610b21565b600081526113fe6113e0611084565b91602092838201526113f9604094600086840152610fa0565b61115c565b600061140933610ede565b5561141e33611419600754610fb0565b610e4d565b61143c6114376007548061143133610ec4565b55611271565b600755565b7f0000000000000000000000000000000000000000000000000000000000000000611465575050565b81516370a0823160e01b8082526001600160a01b03937f0000000000000000000000000000000000000000000000000000000000000000851692908482806114b03060048301610a76565b0381875afa918215611634575b60009261161d575b50847f0000000000000000000000000000000000000000000000000000000000000000938251958691825281806114ff8860048301610a76565b03915afa938415611610575b6000946115f9575b5047908461157657516328e32c8560e11b81526004810192909252909485935083919082602481015b0393165af18015611569575b61154f5750565b6115669061155d3d82610afe565b3d81019061128d565b50565b61157161129c565b611548565b833194611583868561130b565b61158d848361130b565b116115c15750516328e32c8560e11b815260048101929092529094859350602492849291165af180156115695761154f5750565b6115d99192506115d461153c968561130b565b611341565b90519586809581946328e32c8560e11b8352600483019190602083019252565b61160991945061155d3d82610afe565b9238611513565b61161861129c565b61150b565b61162d91925061155d3d82610afe565b90386114c5565b61163c61129c565b6114bd565b1561164857565b5060405162461bcd60e51b815260206004820152600c60248201526b2737ba10309036b2b6b132b960a11b6044820152606490fd5b6001600160a01b039091168152602081019190915260400190565b60206116b19181604051938285809451938492016109bf565b8101600d81520301902090565b60206116d79181604051938285809451938492016109bf565b8101601381520301902090565b156116eb57565b5060405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481858d8d95c1d195960821b6044820152606490fd5b6001906001198111611281570190565b81198111611281570190565b61175461174c33610ec4565b541515611641565b6001600160a01b0361176582610fa0565b5416156117fc576117ed6002916117e86117db6040516117b96117b36117ac8361179388336020840161167d565b03936117a7601f1995868101835282610afe565b611698565b5460ff1690565b156116e4565b6117a760405191826117cf87336020840161167d565b03908101835282610afe565b805460ff19166001179055565b610fa0565b016117f88154611724565b9055565b505060405162461bcd60e51b815260206004820152601660248201527514995c5d595cdd08191bd95cc81b9bdd08195e1a5cdd60521b6044820152606490fd5b1561184357565b5060405162461bcd60e51b8152602060048201526019602482015278105b5bdd5b9d081cd95b9d081a5cdb89dd0818dbdc9c9958dd603a1b6044820152606490fd5b1561188c57565b5060405162461bcd60e51b81526020600482015260156024820152744d656d62657220616c72656164792065786973747360581b6044820152606490fd5b156118d157565b5060405162461bcd60e51b81526020600482015260166024820152755265717565737420616c72656164792065786973747360501b6044820152606490fd5b908160209103126109aa5751610a2a81610ca5565b6119ee906119547f0000000000000000000000000000000000000000000000000000000000000000341461183c565b61197f7f00000000000000000000000000000000000000000000000000000000000000004210610e6c565b61199261198b33610ec4565b5415611885565b6119a561199e33610ede565b54156118ca565b7f0000000000000000000000000000000000000000000000000000000000000000611a06575b6119d3610b21565b338152906020820152600060408201526113f9600a54610fa0565b610b2e611a01600a548061143133610ede565b600a55565b6040516323b872dd60e01b81523360048201523060248201527f0000000000000000000000000000000000000000000000000000000000000000604482015260208160648160006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af18015611aa9575b611a8b575b506119cb565b611aa290611a993d82610afe565b3d810190611910565b5038611a85565b611ab161129c565b611a80565b15611abd57565b5060405162461bcd60e51b8152602060048201526017602482015276129d5919da5b99c8185b1c9958591e481cdd185c9d1959604a1b6044820152606490fd5b15611b0457565b5060405162461bcd60e51b8152602060048201526018602482015277496e737572616e636520616c72656164792065786973747360401b6044820152606490fd5b8151909190611b5d906001600160a01b031683610e4d565b6020808201518051909291600185810192916001600160401b038311611c4f575b611b8c836111a386546110cc565b80601f8411600114611bda5750918080926060969594600398600094611bcf575b50501b9160001990871b1c19161790555b604081015160028501550151910155565b015192503880611bad565b91939495601f198416611bf287600052602060002090565b936000905b828210611c385750509160039795939185606098969410611c20575b505050811b019055611bbe565b015160001983891b60f8161c19169055388080611c13565b808886978294978701518155019601940190611bf7565b611c57610a89565b611b7e565b7f0000000000000000000000000000000000000000000000000000000000000000421115611d3257611d1f91611d12611d1a92611cba7f00000000000000000000000000000000000000000000000000000000000000004210611ab6565b611cc661174c33610ec4565b611cd9611cd233610ef8565b5415611afd565b611d0d600e5480611ce933610ef8565b55611cf2610b30565b33815292602084015284604084015260006060840152610fc0565b611b45565b600454611734565b600455565b610b2e611d2d600e54611271565b600e55565b505060405162461bcd60e51b815260206004820152601d60248201527f436f6e7472616374206973206e6f742076616c696420616e796d6f7265000000604482015260649150fd5b15611d8157565b5060405162461bcd60e51b8152602060048201526017602482015276129d5919da5b99c81b9bdd081cdd185c9d1959081e595d604a1b6044820152606490fd5b15611dc857565b5060405162461bcd60e51b8152602060048201526015602482015274129d5919da5b99c8185b1c9958591e48195b991959605a1b6044820152606490fd5b15611e0d57565b5060405162461bcd60e51b815260206004820152600b60248201526a4e6f742061206a7564676560a81b6044820152606490fd5b15611e4857565b5060405162461bcd60e51b8152602060048201526018602482015277125b9cdd5c985b98d948191bd95cc81b9bdd08195e1a5cdd60421b6044820152606490fd5b15611e9057565b5060405162461bcd60e51b8152602060048201526013602482015272526561736f6e2075726920697320656d70747960681b6044820152606490fd5b611ee582511515829060ff801983541691151516179055565b602091820151805160019283019390916001600160401b038311611fbb575b611f1883611f1287546110cc565b87611108565b81601f8411600114611f515750928293918392600094611f46575b50501b916000199060031b1c1916179055565b015192503880611f33565b919083601f198116611f6888600052602060002090565b946000905b88838310611fa15750505010611f88575b505050811b019055565b015160001960f88460031b161c19169055388080611f7e565b858701518855909601959485019487935090810190611f6d565b611fc3610a89565b611f04565b91611ff47f00000000000000000000000000000000000000000000000000000000000000004211611d7a565b61201f7f00000000000000000000000000000000000000000000000000000000000000004210611dc1565b61203361202b33610f12565b541515611e06565b61205f6001600160a01b0361205761204a86610fc0565b546001600160a01b031690565b161515611e41565b604051906120916117ac8361207887336020840161167d565b039361208c601f1995868101835282610afe565b6116be565b1580612196575b8015612164575b612127576120da6120df928415612116575b6120b9610b3d565b851515815292602084015261208c60405191826117cf89336020840161167d565b611ecc565b6120f8575b506120ee33610f2c565b6117f88154611724565b612103600391610fc0565b0161210e8154611724565b9055386120e4565b61212283511515611e89565b6120b1565b505060405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e481d5c19185d1959608a1b604482015260649350915050fd5b50600161218e6117ac60405161208c816121828a336020840161167d565b03878101835282610afe565b15151461209f565b5080511515612098565b610b2e906121ac610d55565b61221b565b156121b857565b5060405162461bcd60e51b8152602060048201526017602482015276129d5919d95cc8185b1c9958591e481cd95b1958dd1959604a1b6044820152606490fd5b8115612202570690565b61220a61132a565b0690565b8015611007576000190190565b6122467f00000000000000000000000000000000000000000000000000000000000000004211611d7a565b6122717f00000000000000000000000000000000000000000000000000000000000000004210611dc1565b60035460ff1615612281816121b1565b8061242e575b61239d5761229d600160ff196003541617600355565b6122b161010061ff00196003541617600355565b6122c76007916122c18354610ff7565b906121f8565b7f00000000000000000000000000000000000000000000000000000000000000009160015b838111156122fa5750505050565b61230f61204a61230a8386611734565b610fb0565b9261231984610f12565b54612364579061235a61234561233b836123368661235f97611734565b611734565b6122c18654610ff7565b948261235082610f12565b5561141983610fd0565b611271565b6122ec565b612336935061238d6123886123979261237f61235f9561220e565b96818892611734565b611724565b6122c18454610ff7565b92611271565b506123b0600160ff196003541617600355565b6123c061ff001960035416600355565b60017f000000000000000000000000000000000000000000000000000000000000000081805b6123ef57505050565b600754811015612429578061241161240c61204a61242394610fb0565b610f46565b61241c848254611734565b9055611271565b826123e6565b505050565b5061243a600754610ff7565b7f000000000000000000000000000000000000000000000000000000000000000011612287565b1561246857565b5060405162461bcd60e51b8152602060048201526015602482015274129d5919da5b99c81b9bdd08195b991959081e595d605a1b6044820152606490fd5b156124ad57565b5060405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e48199d5b1b199a5b1b195960721b6044820152606490fd5b91908260409103126109aa576020825192015190565b50634e487b7160e01b600052603260045260246000fd5b601554811015612535575b601560005260206000209060011b0190600090565b61253d6124fe565b612520565b601654811015612562575b601660005260206000209060011b0190600090565b61256a6124fe565b61254d565b610b2e90612592601554600160401b8110156125c0575b60018101601555612515565b6125a757906020600191805184550151910155565b6125af6110b5565b906020600191805184550151910155565b6125c8610a89565b612586565b610b2e90612592601654600160401b8110156125f0575b60018101601655612542565b6125f8610a89565b6125e4565b6126287f00000000000000000000000000000000000000000000000000000000000000004211612461565b61263d61263760065460ff1690565b156124a6565b7f0000000000000000000000000000000000000000000000000000000000000000907f0000000000000000000000000000000000000000000000000000000000000000612ac4575b612697600160ff196006541617600655565b600391825460ff811680918192612ab5575b50612aaf5715612a58577f000000000000000000000000000000000000000000000000000000000000000060015b81811115612a0b57506015928354156129ca576007946127668654946127606127596127348361272f6127098b610ff7565b7f000000000000000000000000000000000000000000000000000000000000000061130b565b61130b565b9261275361274d8b5495612747876112cd565b90611341565b99610ff7565b9061130b565b918761130b565b90611014565b9460005b81548110156127af57808660016127836127aa94612515565b50015561279f61240c61204a61279884612515565b5054610fd0565b61241c888254611734565b61276a565b509194600193841c945090925b600e54811015612820578085856127d56127e194610fc0565b0154116127e657611271565b6127bc565b61280661280160026127f784610fc0565b0154600554611734565b600555565b61235a612811610b3d565b828152600060208201526125cd565b5092509290506016928354156129695760058054909390600082821061295857509061284b91611014565b9460005b60005b86548110156128bf578061288e60026128776128706128ba95612542565b5054610fc0565b01546127606128868c8361130b565b8a5490611341565b80600161289a84612542565b50015561241c6128b261240c61204a61287086612542565b918254611734565b612852565b5092955092509250806128d157505050565b6128df906127478354610ff7565b9060005b8354811015612912578061290261240c61204a61279861290d95612515565b61241c858254611734565b6128e3565b50915060015b8254811015612429578061293961293461204a61294494610fb0565b610f12565b541561294957611271565b612918565b61241161240c61204a83610fb0565b96919061296491611014565b61284f565b9250929061297b906127478354610ff7565b9060005b83548110156129a3578061290261240c61204a61279861299e95612515565b61297f565b50915060015b8254811015612429578061293961293461204a6129c594610fb0565b6129a9565b9350906129d79250611734565b6129e76007916127478354610ff7565b60015b8254811015612429578061293961293461204a612a0694610fb0565b6129ea565b80612a23612a1e61204a612a3994610fd0565b610f2c565b54612a2f600e54610ff7565b14612a3e57611271565b6126d7565b61235a612a49610b3d565b8281526000602082015261256f565b909150612a6d600160ff196003541617600355565b612a7d61ff001960035416600355565b60019081805b612a8c57505050565b600754811015612429578061241161240c61204a612aa994610fb0565b82612a83565b50509050565b60ff915060081c1615386126a9565b604080516370a0823160e01b8152919250600091612b4d907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169060208180612b183060048301610a76565b0381855afa908115612bba575b8591612ba5575b508351948580948193639c8f9f2360e01b8352600483019190602083019252565b03925af18015612b98575b612b7b575b50612b75612b6a476112a9565b612747600754610ff7565b90612685565b612b9290612b893d82610afe565b3d8101906124e8565b50612b5d565b612ba061129c565b612b58565b612bb4915061155d3d82610afe565b38612b2c565b612bc261129c565b612b25565b15612bce57565b5060405162461bcd60e51b815260206004820152600a6024820152694e6f2062616c616e636560b01b6044820152606490fd5b612c15612c0d33610f46565b541515612bc7565b7f0000000000000000000000000000000000000000000000000000000000000000612c7857612c4333610f46565b5460008080809381612c5433610f46565b55818115612c6f575b3390f115612c6757565b610b2e61129c565b506108fc612c5d565b6040516370a0823160e01b8152600090602090612d3f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169047848280612ccb3060048301610a76565b0381865afa918215612da5575b8692612d82575b50858080612d0581946115d4612cfe612cf733610f46565b5460011c90565b978861130b565b9481612d1033610f46565b55818115612d79575b3390f115612d6c575b60405194858094819363a9059cbb60e01b8352336004840161167d565b03925af18015612d5f575b612d515750565b61156690611a993d82610afe565b612d6761129c565b612d4a565b612d7461129c565b612d22565b506108fc612d19565b868080939450612d05612d9a829461155d3d82610afe565b959450505050612cdf565b612dad61129c565b612cd8565b604051906000826001918254612dc7816110cc565b80845290848116908115612e2d5750600114612deb575b50610b2e92500383610afe565b9280915060005260209081600020936000915b818310612e15575050610b2e935082010138612dde565b85548884018501529485019487945091830191612dfe565b94505050505060ff19166020830152610b2e826040810138612dde565b6040519060008260025491612e5e836110cc565b808352600193808516908115612e2d5750600114612e835750610b2e92500383610afe565b600260009081527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace94602093509091905b818310612ecb575050610b2e935082010138612dde565b85548884018501529485019487945091830191612eb4565b9060405191826000825492612ef7846110cc565b908184526001948581169081600014612f645750600114612f21575b5050610b2e92500383610afe565b9093915060005260209081600020936000915b818310612f4c575050610b2e93508201013880612f13565b85548884018501529485019487945091830191612f34565b9550505050505060ff19166020830152610b2e82604081013880612f13565b60075460018110611007576000190190565b612f9d612f83565b7f0000000000000000000000000000000000000000000000000000000000000000111590565b600a5460018110611007576000190190565b600060408051612fe481610aa0565b828152606060208201520152600052600c602052604060002060026040519161300c83610aa0565b80546001600160a01b0316835261302560018201612ee3565b60208401520154604082015290565b60ff916130749160005260086020526117a760018060a01b03604060002054166130666040519384926020840161167d565b03601f198101835282610afe565b541690565b600e5460018110611007576000190190565b6000606060405161309b81610ac8565b8281528160208201528260408201520152600052601060205260406000206003604051916130c883610ac8565b80546001600160a01b031683526130e160018201612ee3565b6020840152600281015460408401520154606082015290565b90613140916060602060405161310f81610ae3565b600081520152600052601260205261208c60018060a01b03604060002054166130666040519384926020840161167d565b61316160016040519261315284610ae3565b60ff8154161515845201612ee3565b602082015290565b6020906001600160401b038111613182575b60051b0190565b61318a610a89565b61317b565b9060405161319c81610ae3565b602060018294805484520154910152565b601554906131ba82613169565b916131c86040519384610afe565b8083526015600090815260207f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec4758186015b848410613207575050505050565b6002836001926132168561318f565b8152019201930192906131f9565b6016549061323182613169565b9161323f6040519384610afe565b8083526016600090815260207fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b51242898186015b84841061327e575050505050565b60028360019261328d8561318f565b81520192019301929061327056fe8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a364697066735822122019419f2722ee402967d44013404261cfe09f4f65f21bb2a8d2c646c03e0af8146c6578706572696d656e74616cf564736f6c634300080c0041496e737572616e63653a206a75646765734c656e6774682073686f756c642062496e737572616e63653a2070657263656e74446976696465496e746f4a756467a3646970667358221220ecf4d6abaadeb5e14fe3649d238585f09e7ee4d54da59ce2fa860b17cce5e05b6c6578706572696d656e74616cf564736f6c634300080c0041",
  "deployedBytecode": "0x604060808152600436101562000016575b50600080fd5b600090813560e01c80631fe543e314620001d35780634585e33b14620001b357806368065289146200016e5780636e04ff0d146200013c5780636ebc8c86146200010e578063ba6731c014620000e3578063c3a2a93a14620000b55763fccc134f1462000084575062000010565b34620000b157620000ad91506200009b36620005aa565b60015490519081529081906020820190565b0390f35b5080fd5b5034620000b157620000ad9150620000cd36620005aa565b620000d762000d02565b905191829182620005c5565b50620000ad9150620000ff620000f93662000585565b620009ac565b90519081529081906020820190565b5034620000b157620000ad9150620001306200012a366200053e565b62000d63565b90519182918262000573565b5034620000b157620000ad915062000154366200033c565b50506200016062000bb8565b929091519283928362000523565b50620000ad91506200019a620001843662000418565b9b9a909a99919998929897939796949662000834565b90516001600160a01b0390911681529081906020820190565b5034620000b157620001d0620001c9366200033c565b9062000aeb565b51f35b5034620000b157620001d0620001e93662000291565b9062000611565b50634e487b7160e01b600052604160045260246000fd5b606081019081106001600160401b038211176200022357604052565b6200022d620001f0565b604052565b601f909101601f19168101906001600160401b038211908210176200022357604052565b60405190620002658262000207565b565b6020906001600160401b03811162000281575b60051b0190565b6200028b620001f0565b6200027a565b9060406003198301126200033557600435916024356001600160401b0381116200032c57816023820112156200032c57806004013591620002d28362000267565b92620002e2604051948562000232565b80845260209260248486019260051b8201019283116200032057602401905b82821062000310575050505090565b8135815290830190830162000301565b50505050505050600080fd5b50505050600080fd5b5050600080fd5b90602060031983011262000335576001600160401b0391600435908382116200032c57806023830112156200032c5781600401359384116200032c57602484830101116200038b576024019190565b505050600080fd5b81601f820112156200038b578035906001600160401b038211620003ef575b60405192620003cc601f8401601f19166020018562000232565b828452602083830101116200032c57816000926020809301838601378301015290565b620003f9620001f0565b620003b2565b61014435906001600160a01b0382168214156200033557565b6101a060031982011262000335576001600160401b03906004358281116200032c5781620004499160040162000393565b926024359260443592606435926084359260a4359260c4359260e43592610104359261012435801515811415620004bc579262000485620003ff565b92610164359261018435918211620004a857620004a59160040162000393565b90565b505050505050505050505050505050600080fd5b50505050505050505050505050600080fd5b91908251928382526000905b8482106200050a575092806020939411620004fc575b601f01601f1916010190565b6000838284010152620004f0565b90602090818082850101519082860101520190620004da565b604090620004a59392151581528160208201520190620004ce565b6020906003190112620000105760043590565b80516001600160a01b0316825260208082015190830152604090810151910152565b60608101929162000265919062000551565b602090600319011262000010576004356001600160a01b038116811415620003355790565b60009060031901126200001057565b60009103126200001057565b6020908160408183019282815285518094520193019160005b828110620005ed575050505090565b909192938260608262000604600194895162000551565b01950193929101620005de565b906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811633811415620006cf575062000662906000938452836020526040842054169162000b8e565b51813b15620006c857604051631a9d787960e01b8152600481019190915291908290602490829084905af18015620006b8575b6200069d5750565b6200026590620006ae3d8262000232565b3d810190620005b9565b620006c2620006f2565b62000695565b5050809150fd5b92505050604491506040519063073e64fd60e21b82523360048301526024820152fd5b506040513d6000823e3d90fd5b50634e487b7160e01b600052601160045260246000fd5b8119811162000723570190565b6200072d620006ff565b0190565b50634e487b7160e01b600052603260045260246000fd5b60015481101562000769575b60016000526003602060002091020190600090565b6200077362000731565b62000754565b80546001600160a01b0319166001600160a01b03909216919091179055565b600260406001546001821b81101562000824575b600181018060015581101562000814575b600160005283516003919091027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601939062000803906001600160a01b03168562000779565b602081015160018501550151910155565b6200081e62000731565b620007bd565b6200082e620001f0565b620007ac565b939a9298909499919b95978c97604051998a996142ed97888c01988c8a1060018060401b038b11176200098c575b62000d968d396101c0808a5289016200087b91620004ce565b60208901999099526040880152606087018c9052608087018e905260a087018d905260c087015260e08601526101008501526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001661012085015215156101408401526001600160a01b0316610160830152610180820152808203906101a001526200090e91620004ce565b03906000f0938415936200093b62000949936200093b6200094194620004a5986200097c575b4262000716565b62000716565b918262000716565b6001600160a01b03909316926200095f62000256565b6001600160a01b0385168152916020830152604082015262000798565b62000986620006f2565b62000934565b62000996620001f0565b62000862565b9081602091031262000335575190565b6040516305d3b1d360e41b81527f000000000000000000000000000000000000000000000000000000000000000060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160401b03166024820152600360448201527f000000000000000000000000000000000000000000000000000000000000000063ffffffff16606482015260016084820152919060208360a48160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af192831562000adb575b60009362000ab1575b50620002659062000aab846000526000602052604060002090565b62000779565b6200026591935062000ad39062000ac93d8262000232565b3d8101906200099c565b929062000a90565b62000ae5620006f2565b62000a87565b90816040918101031262000335578035602062000b1a62000b0c8362000748565b50546001600160a01b031690565b9201351562000b6e57600262000b3260009262000748565b5001556001600160a01b0316803b156200033557600080916004604051809481936305bbfb2560e31b83525af18015620006b8576200069d5750565b906000600162000b8262000b8b9462000748565b500155620009ac565b50565b60209080511562000b9d570190565b6200072d62000731565b600190600019811462000723570190565b6060600091600060018054915b82811062000bd257505050565b8162000bde8262000748565b50015415158062000cb7575b8062000c9e575b62000c755762000c018162000748565b506002809101541515908162000c5c575b5062000c295762000c239062000ba7565b62000bc5565b604080516020810192909252600190820152909450919250620004a5905081606081015b03601f19810183528262000232565b905062000c698262000748565b50015442113862000c12565b604080516020810192909252600090820152909450919250620004a59050816060810162000c4d565b50600262000cac8262000748565b500154421062000bf1565b508162000cc48262000748565b500154421162000bea565b9060405162000cde8162000207565b82546001600160a01b03168152600183015460208201526002909201546040830152565b60019081549162000d138362000267565b9262000d23604051948562000232565b808452600082815260208082208187015b84841062000d4457505050505050565b600383879262000d548562000ccf565b81520192019301929062000d34565b62000d8e620004a59160006040805162000d7d8162000207565b828152826020820152015262000748565b5062000ccf56fe6103a0604052346200015e57620000326200001962000284565b9c9b909b9a919a99929998939897949796959662000c94565b6040516132ff908162000fae82396080518181816105520152818161243c0152612f9f015260a0518181816108070152818161135c0152611959015260c05181818161075d0152611c5e015260e05181818161084101528181611c9401528181611fce01526122200152610100518181816106c301528181611ff90152818161224b01526126020152610120518181816108ae015281816122c901526126b50152610140518181816103630152818161192e015281816123c4015261263f01526101605181818161045f015261270b0152610180518150506101a0518181816114c90152612ade01526101c05181818161143e015281816119a7015281816126610152612c1701526101e05181818161147d01528181611a570152612c9101526102005181611a210152f35b600080fd5b50634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b038211908210176200019e57604052565b620001a862000163565b604052565b9080601f8301121562000250578151906001600160401b03821162000240575b60405192602091620001e9601f8501601f19168401866200017a565b838552828483010111620002365782906000905b838383106200021d575050116200021357505090565b6000918301015290565b81935082819392010151828288010152018391620001fd565b5050505050600080fd5b6200024a62000163565b620001cd565b505050600080fd5b51906001600160a01b0382168214156200026e57565b5050600080fd5b51908115158214156200026e57565b620042ed9081380380604051936200029d82866200017a565b84398201916101c081840312620002505780516001600160401b039290838111620002365784620002d0918401620001ad565b9160208101519460408201519460608301519460808401519460a08501519460c08101519460e0820151946101008301519462000311610120850162000258565b9462000321610140860162000275565b9462000331610160820162000258565b94610180820151946101a08301519081116200036457620003539201620001ad565b919d9c9b9a99989796959493929190565b5050505050505050505050505050505050600080fd5b156200038257565b5060405162461bcd60e51b815260206004820152602e60248201527f496e737572616e63653a206d696e4d656d626572732073686f756c642062652060448201526d067726561746572207468616e20360941b6064820152608490fd5b15620003e757565b5060405162461bcd60e51b815260206004820152602f60248201527f496e737572616e63653a207265717565737454696d652073686f756c6420626560448201526e02067726561746572207468616e203608c1b6064820152608490fd5b156200044d57565b5060405162461bcd60e51b815260206004820152602c60248201527f496e737572616e63653a2076616c69646974792073686f756c6420626520677260448201526b06561746572207468616e20360a41b6064820152608490fd5b15620004b057565b5060405162461bcd60e51b815260206004820152603460248201527f496e737572616e63653a206a756467696e67537461727454696d652073686f7560448201527306c642062652067726561746572207468616e20360641b6064820152608490fd5b156200051b57565b5060405162461bcd60e51b815260206004820152602f60248201527f496e737572616e63653a206a756467696e6754696d652073686f756c6420626560448201526e02067726561746572207468616e203608c1b6064820152608490fd5b156200058157565b5060405162461bcd60e51b81526020600482015260306024820152600080516020620042ad83398151915260448201526f0652067726561746572207468616e20360841b6064820152608490fd5b15620005d757565b5060405162461bcd60e51b81526020600482015260426024820152600080516020620042ad83398151915260448201527f65206c657373207468616e206f7220657175616c20746f206d696e4d656d6265606482015261727360f01b608482015260a490fd5b156200064557565b5060405162461bcd60e51b815260206004820152602a60248201527f496e737572616e63653a20616d6f756e742073686f756c6420626520677265616044820152690746572207468616e20360b41b6064820152608490fd5b15620006a657565b5060405162461bcd60e51b815260206004820152603b6024820152600080516020620042cd83398151915260448201527a065732073686f756c642062652067726561746572207468616e203602c1b6064820152608490fd5b156200070757565b5060405162461bcd60e51b81526020600482015260466024820152600080516020620042cd83398151915260448201527f65732073686f756c64206265206c657373207468616e206f7220657175616c206064820152650746f203130360d41b608482015260a490fd5b156200077957565b5060405162461bcd60e51b815260206004820152603360248201527f496e737572616e63653a2065786368616e6765466163746f72794164647265736044820152720732073686f756c64206e6f742062652030783606c1b6064820152608490fd5b15620007e357565b5060405162461bcd60e51b815260206004820152603260248201527f496e737572616e63653a206c6971756964697479546f6b656e4164647265737360448201527102073686f756c64206e6f74206265203078360741b6064820152608490fd5b156200084c57565b5060405162461bcd60e51b815260206004820152603860248201527f496e737572616e63653a206c6971756964697479546f6b656e416d6f756e7420604482015277073686f756c642062652067726561746572207468616e20360441b6064820152608490fd5b90600182811c92168015620008e7575b6020831014620008cf57565b5050634e487b7160e01b600052602260045260246000fd5b91607f1691620008c3565b90601f821162000900575050565b60019160009083825260208220906020601f850160051c8301941062000943575b601f0160051c01915b828110620009385750505050565b81815583016200092a565b909250829062000921565b601f81116200095b575050565b6000906002825260208220906020601f850160051c830194106200099c575b601f0160051c01915b8281106200099057505050565b81815560010162000983565b90925082906200097a565b80519091906001600160401b03811162000a99575b600190620009d681620009d08454620008b3565b620008f2565b602080601f831160011462000a1457508192939460009262000a08575b5050600019600383901b1c191690821b179055565b015190503880620009f3565b6001600052601f198316959091907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6926000905b88821062000a81575050838596971062000a67575b505050811b019055565b015160001960f88460031b161c1916905538808062000a5d565b80878596829496860151815501950193019062000a48565b62000aa362000163565b620009bc565b80519091906001600160401b03811162000b9d575b62000ad68162000ad0600254620008b3565b6200094e565b602080601f831160011462000b15575081929360009262000b09575b50508160011b916000199060031b1c191617600255565b01519050388062000af2565b6002600052601f198316949091907f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace926000905b87821062000b8457505083600195961062000b6a575b505050811b01600255565b015160001960f88460031b161c1916905538808062000b5f565b8060018596829496860151815501950193019062000b49565b62000ba762000163565b62000abe565b8119811162000bba570190565b505050634e487b7160e01b600052601160045260246000fd5b908160209103126200026e5762000bea9062000258565b90565b506040513d6000823e3d90fd5b1562000c0257565b5060405162461bcd60e51b815260206004820152605d60248201527f496e737572616e63653a2065786368616e6765416464726573732073686f756c60448201527f64206e6f74206265203078302c20747279206372656174696e6720657863686160648201527f6e676520696e2065786368616e676520666163746f7279206669727374000000608482015260a490fd5b949a62000e179a62000e219d92949a62000e309f94999a62000e0d9b62000d18989f9a62000dff9b89610300526103805261024052610280526102c05261022052610320526102a0526102e0526102605262000cef62000f63565b62000cfa6001600755565b62000d056001600a55565b62000d106001600e55565b15156200037a565b62000d25831515620003df565b62000d3285151562000445565b62000d3f871515620004a8565b62000d4f61038051151562000513565b62000d5f61024051151562000579565b62000d7361030051610240511115620005cf565b62000d836102805115156200063d565b62000d936102c05115156200069e565b62000da560646102c0511115620006ff565b610220516001600160a01b031661034081905262000dc590151562000771565b61032051158061036052801562000f4d575b62000de290620007db565b61036051801562000f40575b62000df99062000844565b620009a7565b610300516080524262000bad565b8060a05262000bad565b8060c05262000bad565b8060e052610380519062000bad565b61010052610240516101205261028051610140526102c05161016052610220516101805260006103205160001462000f3557506040516303795fb160e11b81526102a0516001600160a01b0316600482015262000ec690602081806024810103816000610340515af190811562000f25575b60009162000f02575b505b806101a0526103605190811562000eee575b5062000bfa565b610320516101c0526102a0516101e0526102e0516102005262000eec6102605162000aa9565b565b6001600160a01b0316151590503862000ebf565b62000f1e915062000f143d826200017a565b3d81019062000bd3565b3862000eab565b62000f2f62000bed565b62000ea2565b62000ec69062000ead565b506102e051151562000dee565b506102a0516001600160a01b0316151562000dd7565b60008054336001600160a01b031982168117835560405190926001600160a01b03909216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a356fe6040608081526004361015610015575b50600080fd5b600090813560e01c8063071694fb146109545780630a4b5162146109225780630cac36b21461090657806313284cdd146108d4578063134fe3041461089a57806316daa23b1461087e5780631a9d7879146108675780631e1e94991461082d578063201095b7146107f3578063253ecfcf146107c157806326757b731461079a5780632ddfd928146107835780633b7f7cfa146107495780633ccfd60b146107325780633e035c78146107005780633f952091146106e95780634340b213146106af5780634c6ee3821461069d5780635ee8906d1461067757806365b21d14146106505780636f80886c14610613578063715018a6146105fc5780637248f579146105e057806379ee10b0146105b55780637d4b1a5f1461058f5780638170aff0146105785780638618e9d31461053e5780638c9a92a2146104b75780638da5cb5b146105165780638f180305146104fa578063a095f2b4146104e2578063b0118f4a146104b7578063b035d6e114610485578063b7e44ba41461044b578063bfbdef7e14610425578063c4677c04146103ff578063c864b70e146103e7578063cf1dd2b4146103c0578063cfdd1ce31461038e578063d321fe291461034f578063e12c2d9114610327578063e1aac42014610300578063e57384db146102d2578063ed3ee1de146102a5578063f0e22d5214610289578063f2fde38b1461026f5763f8b2cb4f14610227575061000f565b3461026b57610267915061025861023d36610987565b6001600160a01b031660009081526017602052604090205490565b90519081529081906020820190565b0390f35b5080fd5b503461026b5761028661028136610987565b610daf565b51f35b503461026b57610267915061029d366109b1565b610258612fc3565b503461026b5761026791506102b9366109b1565b6102c1612f95565b905191829182901515815260200190565b503461026b5761026791506102e6366109b1565b60ff60035460081c16905191829182901515815260200190565b503461026b576102679150610314366109b1565b61031c612e4a565b905191829182610a19565b503461026b57610267915061034461033e36610971565b906130fa565b905191829182610cf5565b5090346103895750610360366109b1565b517f00000000000000000000000000000000000000000000000000000000000000008152602090f35b809150fd5b503461026b5761026791506102586103a536610987565b6001600160a01b031660009081526009602052604090205490565b503461026b5761026791506103d4366109b1565b6103dc613224565b905191829182610c2a565b503461026b576102866103f936610cb0565b91611fc8565b503461026b576102679150610413366109b1565b60155490519081529081906020820190565b503461026b576102679150610439366109b1565b60045490519081529081906020820190565b509034610389575061045c366109b1565b517f00000000000000000000000000000000000000000000000000000000000000008152602090f35b503461026b57610267915061025861049c36610987565b6001600160a01b03166000908152600b602052604090205490565b503461026b5761026791506104cb366109b1565b60ff60035416905191829182901515815260200190565b503461026b576102866104f436610c74565b90611c5c565b503461026b57610267915061050e366109b1565b610258612f83565b503461026b5761026791610529366109b1565b5490519182916001600160a01b031682610a76565b509034610389575061054f366109b1565b517f00000000000000000000000000000000000000000000000000000000000000008152602090f35b503461026b5761028661058a36610a2d565b611740565b503461026b5761026791506105a3366109b1565b60055490519081529081906020820190565b503461026b5761026791506105c9366109b1565b60ff60065416905191829182901515815260200190565b503461026b5761026791506105f4366109b1565b6103dc6131ad565b503461026b5761060b366109b1565b610286610d18565b503461026b57610267915061064561062a36610a2d565b6000908152600860205260409020546001600160a01b031690565b905191829182610a76565b503461026b57610267915061066c61066736610a2d565b61308b565b905191829182610be9565b503461026b57610267915061068b366109b1565b60165490519081529081906020820190565b506102866106aa36610bbf565b611925565b50903461038957506106c0366109b1565b517f00000000000000000000000000000000000000000000000000000000000000008152602090f35b503461026b576106f8366109b1565b610286611357565b503461026b57610267915061064561071736610a2d565b6000908152601260205260409020546001600160a01b031690565b503461026b57610741366109b1565b610286612c01565b509034610389575061075a366109b1565b517f00000000000000000000000000000000000000000000000000000000000000008152602090f35b503461026b57610792366109b1565b6102866125fd565b503461026b5761026791506107b66107b136610a2d565b612fd5565b905191829182610a3f565b503461026b5761026791506102586107d836610987565b6001600160a01b03166000908152600f602052604090205490565b5090346103895750610804366109b1565b517f00000000000000000000000000000000000000000000000000000000000000008152602090f35b509034610389575061083e366109b1565b517f00000000000000000000000000000000000000000000000000000000000000008152602090f35b503461026b5761028661087936610a2d565b6121a0565b503461026b576102679150610892366109b1565b610258613079565b50903461038957506108ab366109b1565b517f00000000000000000000000000000000000000000000000000000000000000008152602090f35b503461026b5761026791506102586108eb36610987565b6001600160a01b031660009081526011602052604090205490565b503461026b57610267915061091a366109b1565b61031c612db2565b503461026b57610267915061025861093936610987565b6001600160a01b031660009081526014602052604090205490565b503461026b5761026791506102c161096b36610971565b90613034565b604090600319011261000f576004359060243590565b602090600319011261000f576004356001600160a01b0381168114156109aa5790565b5050600080fd5b600090600319011261000f57565b918091926000905b8282106109df5750116109d8575050565b6000910152565b915080602091830151818601520182916109c7565b90602091610a0d815180928185528580860191016109bf565b601f01601f1916010190565b906020610a2a9281815201906109f4565b90565b602090600319011261000f5760043590565b6020815260018060a01b03825116602082015260606040610a6d6020850151838386015260808501906109f4565b93015191015290565b6001600160a01b03909116815260200190565b50634e487b7160e01b600052604160045260246000fd5b606081019081106001600160401b03821117610abb57604052565b610ac3610a89565b604052565b608081019081106001600160401b03821117610abb57604052565b604081019081106001600160401b03821117610abb57604052565b601f909101601f19168101906001600160401b03821190821017610abb57604052565b60405190610b2e82610aa0565b565b60405190610b2e82610ac8565b60405190610b2e82610ae3565b81601f82011215610bb7578035906001600160401b038211610baa575b60405192610b7f601f8401601f191660200185610afe565b82845260208383010111610ba157816000926020809301838601378301015290565b50505050600080fd5b610bb2610a89565b610b67565b505050600080fd5b60206003198201126109aa57600435906001600160401b038211610bb757610a2a91600401610b4a565b6020815260018060a01b03825116602082015260806060610c18602085015183604086015260a08501906109f4565b93604081015182850152015191015290565b60208082019080835283518092528060408094019401926000905b838210610c5457505050505090565b845180518752830151868401529485019493820193600190910190610c45565b60406003198201126109aa57600435906001600160401b038211610bb757610c9e91600401610b4a565b9060243590565b801515141561000f57565b60606003198201126109aa5760043591602435610ccc81610ca5565b91604435906001600160401b038211610ceb57610a2a91600401610b4a565b5050505050600080fd5b60606020610a2a93818452805115158285015201519160408082015201906109f4565b610d20610d55565b600080546001600160a01b0319811682556040516001600160a01b039091169060008051602061329c833981519152908390a3565b6000546001600160a01b0316331415610d6a57565b50606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b610db7610d55565b6001600160a01b03908116908115610df657600080546001600160a01b031981168417825560405192169160008051602061329c8339815191529190a3565b505060405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260849150fd5b80546001600160a01b0319166001600160a01b03909216919091179055565b15610e7357565b5060405162461bcd60e51b815260206004820152602260248201527f416464696e67206d656d626572206973206e6f742076616c696420616e796d6f604482015261726560f01b6064820152608490fd5b6001600160a01b0316600090815260096020526040902090565b6001600160a01b03166000908152600b6020526040902090565b6001600160a01b03166000908152600f6020526040902090565b6001600160a01b0316600090815260116020526040902090565b6001600160a01b0316600090815260146020526040902090565b6001600160a01b0316600090815260176020526040902090565b15610f6757565b5060405162461bcd60e51b815260206004820152601060248201526f20b63932b0b23c90309036b2b6b132b960811b6044820152606490fd5b600052600c602052604060002090565b6000526008602052604060002090565b6000526010602052604060002090565b6000526012602052604060002090565b50634e487b7160e01b600052601160045260246000fd5b60018110611007575b6000190190565b61100f610fe0565b611000565b81811061101f570390565b611027610fe0565b0390565b1561103257565b5060405162461bcd60e51b8152602060048201526024808201527f4e6f7420616c6c206d656d6265727320616363657074656420746865207265716044820152631d595cdd60e21b6064820152608490fd5b60405190602082016001600160401b038111838210176110a8575b60405260008252565b6110b0610a89565b61109f565b50634e487b7160e01b600052600060045260246000fd5b90600182811c921680156110fe575b60208310146110e657565b5050634e487b7160e01b600052602260045260246000fd5b91607f16916110db565b90601f811161111657505050565b600091825260208220906020601f850160051c83019410611152575b601f0160051c01915b82811061114757505050565b81815560010161113b565b9092508290611132565b8151909190611174906001600160a01b031683610e4d565b6020808201518051909291600185810192916001600160401b038311611264575b6111a9836111a386546110cc565b86611108565b80601f84116001146111ee57509180809260409695946002986000946111e3575b50501b916000199060031b1c19161790555b0151910155565b0151925038806111ca565b91939495601f19841661120687600052602060002090565b936000905b82821061124d5750509160029795939185604098969410611234575b505050811b0190556111dc565b015160001960f88460031b161c19169055388080611227565b80888697829497870151815501960194019061120b565b61126c610a89565b611195565b6001906000198114611281570190565b611289610fe0565b0190565b908160209103126109aa575190565b506040513d6000823e3d90fd5b8060001904600211811515166112c0575b60011b90565b6112c8610fe0565b6112ba565b7f028f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f81116001166112fe575b60640290565b611306610fe0565b6112f8565b806000190482118115151661131e570290565b611326610fe0565b0290565b50634e487b7160e01b600052601260045260246000fd5b811561134b570490565b61135361132a565b0490565b6113827f00000000000000000000000000000000000000000000000000000000000000004210610e6c565b61139561138e33610ec4565b5415610f60565b6113bf60026113ac6113a633610ede565b54610fa0565b01546113b9600754610ff7565b1461102b565b6113c833610ede565b546113d1610b21565b600081526113fe6113e0611084565b91602092838201526113f9604094600086840152610fa0565b61115c565b600061140933610ede565b5561141e33611419600754610fb0565b610e4d565b61143c6114376007548061143133610ec4565b55611271565b600755565b7f0000000000000000000000000000000000000000000000000000000000000000611465575050565b81516370a0823160e01b8082526001600160a01b03937f0000000000000000000000000000000000000000000000000000000000000000851692908482806114b03060048301610a76565b0381875afa918215611634575b60009261161d575b50847f0000000000000000000000000000000000000000000000000000000000000000938251958691825281806114ff8860048301610a76565b03915afa938415611610575b6000946115f9575b5047908461157657516328e32c8560e11b81526004810192909252909485935083919082602481015b0393165af18015611569575b61154f5750565b6115669061155d3d82610afe565b3d81019061128d565b50565b61157161129c565b611548565b833194611583868561130b565b61158d848361130b565b116115c15750516328e32c8560e11b815260048101929092529094859350602492849291165af180156115695761154f5750565b6115d99192506115d461153c968561130b565b611341565b90519586809581946328e32c8560e11b8352600483019190602083019252565b61160991945061155d3d82610afe565b9238611513565b61161861129c565b61150b565b61162d91925061155d3d82610afe565b90386114c5565b61163c61129c565b6114bd565b1561164857565b5060405162461bcd60e51b815260206004820152600c60248201526b2737ba10309036b2b6b132b960a11b6044820152606490fd5b6001600160a01b039091168152602081019190915260400190565b60206116b19181604051938285809451938492016109bf565b8101600d81520301902090565b60206116d79181604051938285809451938492016109bf565b8101601381520301902090565b156116eb57565b5060405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481858d8d95c1d195960821b6044820152606490fd5b6001906001198111611281570190565b81198111611281570190565b61175461174c33610ec4565b541515611641565b6001600160a01b0361176582610fa0565b5416156117fc576117ed6002916117e86117db6040516117b96117b36117ac8361179388336020840161167d565b03936117a7601f1995868101835282610afe565b611698565b5460ff1690565b156116e4565b6117a760405191826117cf87336020840161167d565b03908101835282610afe565b805460ff19166001179055565b610fa0565b016117f88154611724565b9055565b505060405162461bcd60e51b815260206004820152601660248201527514995c5d595cdd08191bd95cc81b9bdd08195e1a5cdd60521b6044820152606490fd5b1561184357565b5060405162461bcd60e51b8152602060048201526019602482015278105b5bdd5b9d081cd95b9d081a5cdb89dd0818dbdc9c9958dd603a1b6044820152606490fd5b1561188c57565b5060405162461bcd60e51b81526020600482015260156024820152744d656d62657220616c72656164792065786973747360581b6044820152606490fd5b156118d157565b5060405162461bcd60e51b81526020600482015260166024820152755265717565737420616c72656164792065786973747360501b6044820152606490fd5b908160209103126109aa5751610a2a81610ca5565b6119ee906119547f0000000000000000000000000000000000000000000000000000000000000000341461183c565b61197f7f00000000000000000000000000000000000000000000000000000000000000004210610e6c565b61199261198b33610ec4565b5415611885565b6119a561199e33610ede565b54156118ca565b7f0000000000000000000000000000000000000000000000000000000000000000611a06575b6119d3610b21565b338152906020820152600060408201526113f9600a54610fa0565b610b2e611a01600a548061143133610ede565b600a55565b6040516323b872dd60e01b81523360048201523060248201527f0000000000000000000000000000000000000000000000000000000000000000604482015260208160648160006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af18015611aa9575b611a8b575b506119cb565b611aa290611a993d82610afe565b3d810190611910565b5038611a85565b611ab161129c565b611a80565b15611abd57565b5060405162461bcd60e51b8152602060048201526017602482015276129d5919da5b99c8185b1c9958591e481cdd185c9d1959604a1b6044820152606490fd5b15611b0457565b5060405162461bcd60e51b8152602060048201526018602482015277496e737572616e636520616c72656164792065786973747360401b6044820152606490fd5b8151909190611b5d906001600160a01b031683610e4d565b6020808201518051909291600185810192916001600160401b038311611c4f575b611b8c836111a386546110cc565b80601f8411600114611bda5750918080926060969594600398600094611bcf575b50501b9160001990871b1c19161790555b604081015160028501550151910155565b015192503880611bad565b91939495601f198416611bf287600052602060002090565b936000905b828210611c385750509160039795939185606098969410611c20575b505050811b019055611bbe565b015160001983891b60f8161c19169055388080611c13565b808886978294978701518155019601940190611bf7565b611c57610a89565b611b7e565b7f0000000000000000000000000000000000000000000000000000000000000000421115611d3257611d1f91611d12611d1a92611cba7f00000000000000000000000000000000000000000000000000000000000000004210611ab6565b611cc661174c33610ec4565b611cd9611cd233610ef8565b5415611afd565b611d0d600e5480611ce933610ef8565b55611cf2610b30565b33815292602084015284604084015260006060840152610fc0565b611b45565b600454611734565b600455565b610b2e611d2d600e54611271565b600e55565b505060405162461bcd60e51b815260206004820152601d60248201527f436f6e7472616374206973206e6f742076616c696420616e796d6f7265000000604482015260649150fd5b15611d8157565b5060405162461bcd60e51b8152602060048201526017602482015276129d5919da5b99c81b9bdd081cdd185c9d1959081e595d604a1b6044820152606490fd5b15611dc857565b5060405162461bcd60e51b8152602060048201526015602482015274129d5919da5b99c8185b1c9958591e48195b991959605a1b6044820152606490fd5b15611e0d57565b5060405162461bcd60e51b815260206004820152600b60248201526a4e6f742061206a7564676560a81b6044820152606490fd5b15611e4857565b5060405162461bcd60e51b8152602060048201526018602482015277125b9cdd5c985b98d948191bd95cc81b9bdd08195e1a5cdd60421b6044820152606490fd5b15611e9057565b5060405162461bcd60e51b8152602060048201526013602482015272526561736f6e2075726920697320656d70747960681b6044820152606490fd5b611ee582511515829060ff801983541691151516179055565b602091820151805160019283019390916001600160401b038311611fbb575b611f1883611f1287546110cc565b87611108565b81601f8411600114611f515750928293918392600094611f46575b50501b916000199060031b1c1916179055565b015192503880611f33565b919083601f198116611f6888600052602060002090565b946000905b88838310611fa15750505010611f88575b505050811b019055565b015160001960f88460031b161c19169055388080611f7e565b858701518855909601959485019487935090810190611f6d565b611fc3610a89565b611f04565b91611ff47f00000000000000000000000000000000000000000000000000000000000000004211611d7a565b61201f7f00000000000000000000000000000000000000000000000000000000000000004210611dc1565b61203361202b33610f12565b541515611e06565b61205f6001600160a01b0361205761204a86610fc0565b546001600160a01b031690565b161515611e41565b604051906120916117ac8361207887336020840161167d565b039361208c601f1995868101835282610afe565b6116be565b1580612196575b8015612164575b612127576120da6120df928415612116575b6120b9610b3d565b851515815292602084015261208c60405191826117cf89336020840161167d565b611ecc565b6120f8575b506120ee33610f2c565b6117f88154611724565b612103600391610fc0565b0161210e8154611724565b9055386120e4565b61212283511515611e89565b6120b1565b505060405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e481d5c19185d1959608a1b604482015260649350915050fd5b50600161218e6117ac60405161208c816121828a336020840161167d565b03878101835282610afe565b15151461209f565b5080511515612098565b610b2e906121ac610d55565b61221b565b156121b857565b5060405162461bcd60e51b8152602060048201526017602482015276129d5919d95cc8185b1c9958591e481cd95b1958dd1959604a1b6044820152606490fd5b8115612202570690565b61220a61132a565b0690565b8015611007576000190190565b6122467f00000000000000000000000000000000000000000000000000000000000000004211611d7a565b6122717f00000000000000000000000000000000000000000000000000000000000000004210611dc1565b60035460ff1615612281816121b1565b8061242e575b61239d5761229d600160ff196003541617600355565b6122b161010061ff00196003541617600355565b6122c76007916122c18354610ff7565b906121f8565b7f00000000000000000000000000000000000000000000000000000000000000009160015b838111156122fa5750505050565b61230f61204a61230a8386611734565b610fb0565b9261231984610f12565b54612364579061235a61234561233b836123368661235f97611734565b611734565b6122c18654610ff7565b948261235082610f12565b5561141983610fd0565b611271565b6122ec565b612336935061238d6123886123979261237f61235f9561220e565b96818892611734565b611724565b6122c18454610ff7565b92611271565b506123b0600160ff196003541617600355565b6123c061ff001960035416600355565b60017f000000000000000000000000000000000000000000000000000000000000000081805b6123ef57505050565b600754811015612429578061241161240c61204a61242394610fb0565b610f46565b61241c848254611734565b9055611271565b826123e6565b505050565b5061243a600754610ff7565b7f000000000000000000000000000000000000000000000000000000000000000011612287565b1561246857565b5060405162461bcd60e51b8152602060048201526015602482015274129d5919da5b99c81b9bdd08195b991959081e595d605a1b6044820152606490fd5b156124ad57565b5060405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e48199d5b1b199a5b1b195960721b6044820152606490fd5b91908260409103126109aa576020825192015190565b50634e487b7160e01b600052603260045260246000fd5b601554811015612535575b601560005260206000209060011b0190600090565b61253d6124fe565b612520565b601654811015612562575b601660005260206000209060011b0190600090565b61256a6124fe565b61254d565b610b2e90612592601554600160401b8110156125c0575b60018101601555612515565b6125a757906020600191805184550151910155565b6125af6110b5565b906020600191805184550151910155565b6125c8610a89565b612586565b610b2e90612592601654600160401b8110156125f0575b60018101601655612542565b6125f8610a89565b6125e4565b6126287f00000000000000000000000000000000000000000000000000000000000000004211612461565b61263d61263760065460ff1690565b156124a6565b7f0000000000000000000000000000000000000000000000000000000000000000907f0000000000000000000000000000000000000000000000000000000000000000612ac4575b612697600160ff196006541617600655565b600391825460ff811680918192612ab5575b50612aaf5715612a58577f000000000000000000000000000000000000000000000000000000000000000060015b81811115612a0b57506015928354156129ca576007946127668654946127606127596127348361272f6127098b610ff7565b7f000000000000000000000000000000000000000000000000000000000000000061130b565b61130b565b9261275361274d8b5495612747876112cd565b90611341565b99610ff7565b9061130b565b918761130b565b90611014565b9460005b81548110156127af57808660016127836127aa94612515565b50015561279f61240c61204a61279884612515565b5054610fd0565b61241c888254611734565b61276a565b509194600193841c945090925b600e54811015612820578085856127d56127e194610fc0565b0154116127e657611271565b6127bc565b61280661280160026127f784610fc0565b0154600554611734565b600555565b61235a612811610b3d565b828152600060208201526125cd565b5092509290506016928354156129695760058054909390600082821061295857509061284b91611014565b9460005b60005b86548110156128bf578061288e60026128776128706128ba95612542565b5054610fc0565b01546127606128868c8361130b565b8a5490611341565b80600161289a84612542565b50015561241c6128b261240c61204a61287086612542565b918254611734565b612852565b5092955092509250806128d157505050565b6128df906127478354610ff7565b9060005b8354811015612912578061290261240c61204a61279861290d95612515565b61241c858254611734565b6128e3565b50915060015b8254811015612429578061293961293461204a61294494610fb0565b610f12565b541561294957611271565b612918565b61241161240c61204a83610fb0565b96919061296491611014565b61284f565b9250929061297b906127478354610ff7565b9060005b83548110156129a3578061290261240c61204a61279861299e95612515565b61297f565b50915060015b8254811015612429578061293961293461204a6129c594610fb0565b6129a9565b9350906129d79250611734565b6129e76007916127478354610ff7565b60015b8254811015612429578061293961293461204a612a0694610fb0565b6129ea565b80612a23612a1e61204a612a3994610fd0565b610f2c565b54612a2f600e54610ff7565b14612a3e57611271565b6126d7565b61235a612a49610b3d565b8281526000602082015261256f565b909150612a6d600160ff196003541617600355565b612a7d61ff001960035416600355565b60019081805b612a8c57505050565b600754811015612429578061241161240c61204a612aa994610fb0565b82612a83565b50509050565b60ff915060081c1615386126a9565b604080516370a0823160e01b8152919250600091612b4d907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169060208180612b183060048301610a76565b0381855afa908115612bba575b8591612ba5575b508351948580948193639c8f9f2360e01b8352600483019190602083019252565b03925af18015612b98575b612b7b575b50612b75612b6a476112a9565b612747600754610ff7565b90612685565b612b9290612b893d82610afe565b3d8101906124e8565b50612b5d565b612ba061129c565b612b58565b612bb4915061155d3d82610afe565b38612b2c565b612bc261129c565b612b25565b15612bce57565b5060405162461bcd60e51b815260206004820152600a6024820152694e6f2062616c616e636560b01b6044820152606490fd5b612c15612c0d33610f46565b541515612bc7565b7f0000000000000000000000000000000000000000000000000000000000000000612c7857612c4333610f46565b5460008080809381612c5433610f46565b55818115612c6f575b3390f115612c6757565b610b2e61129c565b506108fc612c5d565b6040516370a0823160e01b8152600090602090612d3f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169047848280612ccb3060048301610a76565b0381865afa918215612da5575b8692612d82575b50858080612d0581946115d4612cfe612cf733610f46565b5460011c90565b978861130b565b9481612d1033610f46565b55818115612d79575b3390f115612d6c575b60405194858094819363a9059cbb60e01b8352336004840161167d565b03925af18015612d5f575b612d515750565b61156690611a993d82610afe565b612d6761129c565b612d4a565b612d7461129c565b612d22565b506108fc612d19565b868080939450612d05612d9a829461155d3d82610afe565b959450505050612cdf565b612dad61129c565b612cd8565b604051906000826001918254612dc7816110cc565b80845290848116908115612e2d5750600114612deb575b50610b2e92500383610afe565b9280915060005260209081600020936000915b818310612e15575050610b2e935082010138612dde565b85548884018501529485019487945091830191612dfe565b94505050505060ff19166020830152610b2e826040810138612dde565b6040519060008260025491612e5e836110cc565b808352600193808516908115612e2d5750600114612e835750610b2e92500383610afe565b600260009081527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace94602093509091905b818310612ecb575050610b2e935082010138612dde565b85548884018501529485019487945091830191612eb4565b9060405191826000825492612ef7846110cc565b908184526001948581169081600014612f645750600114612f21575b5050610b2e92500383610afe565b9093915060005260209081600020936000915b818310612f4c575050610b2e93508201013880612f13565b85548884018501529485019487945091830191612f34565b9550505050505060ff19166020830152610b2e82604081013880612f13565b60075460018110611007576000190190565b612f9d612f83565b7f0000000000000000000000000000000000000000000000000000000000000000111590565b600a5460018110611007576000190190565b600060408051612fe481610aa0565b828152606060208201520152600052600c602052604060002060026040519161300c83610aa0565b80546001600160a01b0316835261302560018201612ee3565b60208401520154604082015290565b60ff916130749160005260086020526117a760018060a01b03604060002054166130666040519384926020840161167d565b03601f198101835282610afe565b541690565b600e5460018110611007576000190190565b6000606060405161309b81610ac8565b8281528160208201528260408201520152600052601060205260406000206003604051916130c883610ac8565b80546001600160a01b031683526130e160018201612ee3565b6020840152600281015460408401520154606082015290565b90613140916060602060405161310f81610ae3565b600081520152600052601260205261208c60018060a01b03604060002054166130666040519384926020840161167d565b61316160016040519261315284610ae3565b60ff8154161515845201612ee3565b602082015290565b6020906001600160401b038111613182575b60051b0190565b61318a610a89565b61317b565b9060405161319c81610ae3565b602060018294805484520154910152565b601554906131ba82613169565b916131c86040519384610afe565b8083526015600090815260207f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec4758186015b848410613207575050505050565b6002836001926132168561318f565b8152019201930192906131f9565b6016549061323182613169565b9161323f6040519384610afe565b8083526016600090815260207fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b51242898186015b84841061327e575050505050565b60028360019261328d8561318f565b81520192019301929061327056fe8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a364697066735822122019419f2722ee402967d44013404261cfe09f4f65f21bb2a8d2c646c03e0af8146c6578706572696d656e74616cf564736f6c634300080c0041496e737572616e63653a206a75646765734c656e6774682073686f756c642062496e737572616e63653a2070657263656e74446976696465496e746f4a756467a3646970667358221220ecf4d6abaadeb5e14fe3649d238585f09e7ee4d54da59ce2fa860b17cce5e05b6c6578706572696d656e74616cf564736f6c634300080c0041",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "performUpkeep(bytes)": {
        "details": "The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.",
        "params": {
          "performData": "is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "performUpkeep(bytes)": {
        "notice": "method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1723,
        "contract": "contracts/Factory.sol:Factory",
        "label": "s_requestIdToContractAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1727,
        "contract": "contracts/Factory.sol:Factory",
        "label": "s_contractInfos",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(ContractInfo)1702_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(ContractInfo)1702_storage)dyn_storage": {
        "base": "t_struct(ContractInfo)1702_storage",
        "encoding": "dynamic_array",
        "label": "struct Factory.ContractInfo[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(ContractInfo)1702_storage": {
        "encoding": "inplace",
        "label": "struct Factory.ContractInfo",
        "members": [
          {
            "astId": 1697,
            "contract": "contracts/Factory.sol:Factory",
            "label": "contractAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1699,
            "contract": "contracts/Factory.sol:Factory",
            "label": "judgingStartTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1701,
            "contract": "contracts/Factory.sol:Factory",
            "label": "judgingEndTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}